// TODO: APPRAISAL, JOB, AWARDS, CONTRACT, EMPLOYEE DOCUMENT, COMPLAINT, TRAINING
// TODO: add employee contact list to store some contact details ?

model Employee {
  id            String    @id @default(cuid())
  fullName      String?
  displayName   String?
  email         String?
  birthDate     DateTime?
  gender        String?
  contactNumber String?
  address       Json?
  image         String?
  salary        Float?
  dateJoined    DateTime?
  leaveDate     DateTime?
  bloodGroup    String?
  ethnicRace    String?
  maritalStatus String?
  isActive      Boolean   @default(true)

  role EmployeeRole @default(MEMBER)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  invite Invite[]

  // PM/TASKS
  subtasks            Subtask[]
  taskComments        TaskComment[]
  taskHistory         TaskHistory[]
  projectHistory      ProjectHistory[]
  tasks               Task[]
  taskFiles           TaskFile[]
  projects            Project[]
  employeeTeam        EmployeeTeam[]
  taskCollaborator    TaskCollaborator[]
  projectCollaborator ProjectCollaborator[]
  subtaskCollaborator SubtaskCollaborator[]

  // HR
  leave                 Leave[]
  leaveComment          LeaveComment[]
  leaveType             LeaveType[]
  educations            Education[]
  attendances           Attendance[]
  jobs                  Job[]
  events                Event[]
  notifications         Notification[]
  notificationRecipient NotificationRecipient[]
  timesheets            Timesheet[]
  payroll               Payroll[]

  // CHAT
  groupMessages          GroupMessage[]
  conversationsInitiated Conversation[]  @relation("EmployeeOne")
  conversationsReceived  Conversation[]  @relation("EmployeeTwo")
  directMessages         DirectMessage[]
  groups                 Group[]
  groupMembers           GroupMembers[]

  // FILE MANAGER 
  files       File[]
  folders     Folder[]
  sharedFiles SharedLinkEmployee[]
  trashbins   TrashBin[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@index([userId])
  @@index([workspaceId])
  @@index([id])
  @@index([role])
}

model Team {
  id    String  @id @default(cuid())
  name  String
  alias String?

  role TeamRole @default(MEMBER)

  workspaceId  String
  workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  employeeTeam EmployeeTeam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

// Join table for many-to-many relation between Employee and Team
model EmployeeTeam {
  id         String   @id @default(cuid())
  employeeId String
  teamId     String
  role       TeamRole @default(MEMBER)

  teamCreator Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([teamId])
}

model Leave {
  id String @id @default(cuid())

  appliedDate DateTime @default(now())
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date
  duration    Int
  reason      String?

  //  leaveResponseFrom DateTime? // accept leave startDate
  // leaveResponseTo   DateTime? // accepted leave endDate 
  leaveResponseBy String? // the admin that responded to the leave
  leaveTypeId     String
  status          LeaveStatus @default(PENDING)

  leaveType LeaveType      @relation(fields: [leaveTypeId], references: [id])
  comments  LeaveComment[]

  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([employeeId])
  @@index([leaveTypeId])
  @@index([workspaceId])
}

model LeaveType {
  id   String @id @default(cuid())
  name String

  leaves Leave[]

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
  @@index([employeeId])
  @@index([workspaceId])
}

model LeaveComment {
  id String @id @default(cuid())

  comments String

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  leave   Leave  @relation(fields: [leaveId], references: [id])
  leaveId String

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())

  updatedAt DateTime @updatedAt

  @@index([leaveId])
  @@index([workspaceId])
  @@index([employeeId])
}

model LeaveHistory {
  id            String       @id @default(cuid())
  leaveId       String
  oldStatus     LeaveStatus
  updatedDate   DateTime?
  updatedStatus LeaveStatus?
  updatedBy     String?
}

model Attendance {
  id           String           @id @default(cuid())
  clockIn      DateTime
  clockOut     DateTime?
  totalHour    Float?
  late         Float?
  earlyLeaving Float?
  overtime     Float?
  break        Float?
  state        AttendanceStatus

  employeeId String
  punchedBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

model Education {
  id String @id @default(cuid())

  institution   String
  courseOfStudy String
  result        String?
  degree        String
  startDate     DateTime?
  endDate       DateTime?
  status        Boolean   @default(true)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

model NotificationRecipient {
  id             String   @id @default(cuid())
  notificationId String
  recipientId    String
  recipient      Employee @relation(fields: [recipientId], references: [id])

  notification Notification @relation(fields: [notificationId], references: [id])
}

model Notification {
  id          String    @id @default(cuid())
  title       String
  description String
  isPublished Boolean   @default(true)
  sentAt      DateTime?

  employeeId String
  createdBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  recipients NotificationRecipient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
  @@index([employeeId])
}

model Timesheet {
  id          String   @id @default(cuid())
  date        DateTime
  hoursWorked Float
  remark      String?
  overtime    Float

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

// PAYMENT

model Payroll {
  id          String       @id @default(cuid())
  employeeId  String
  salary      Float
  payPeriod   String
  paymentDate DateTime
  deductions  Deduction[]
  commissions Commission[]
  bonuses     Bonus[]

  creatorId String
  createdBy Employee  @relation(fields: [creatorId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payslip   Payslip[]
}

model Deduction {
  id          String   @id @default(cuid())
  payroll     Payroll  @relation(fields: [payrollId], references: [id])
  payrollId   String
  name        String
  amount      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Payslip     Payslip? @relation(fields: [payslipId], references: [id])
  payslipId   String?
}

model Commission {
  id          String   @id @default(cuid())
  payroll     Payroll  @relation(fields: [payrollId], references: [id])
  payrollId   String
  name        String
  amount      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Payslip     Payslip? @relation(fields: [payslipId], references: [id])
  payslipId   String?
}

model Bonus {
  id          String @id @default(cuid())
  name        String
  amount      Float
  description String

  payrollId String
  payroll   Payroll  @relation(fields: [payrollId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Payslip   Payslip? @relation(fields: [payslipId], references: [id])
  payslipId String?
}

model Payslip {
  id            String       @id @default(cuid())
  payroll       Payroll      @relation(fields: [payrollId], references: [id])
  payrollId     String
  payPeriod     String
  paymentDate   DateTime
  employeeName  String
  employeeId    String
  grossEarnings Float
  netPay        Float
  taxes         Float
  deductions    Deduction[]
  commissions   Commission[]
  bonuses       Bonus[]
}

// Job Board 
model Job {
  id            String                 @id @default(cuid())
  title         String
  description   String
  category      String?
  branch        String?
  email         String?
  address       String?
  salaryRange   Int?
  noOfPositions Int?
  // type          String
  // education     String
  // industry      String
  // experience    String
  isActive      Boolean                @default(true)
  jobApplicant  JobApplicantResponse[]

  createdBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
  @@index([employeeId])
}

// TODO: Recieves external user applications
// TODO: When application is received send an email to the applicant
// TODO: When application is rejected send a custom email 
// TODO: When application is accepted send a custom email 

model JobApplicantResponse {
  id       String @id @default(cuid())
  fullName String
  email    String
  job      Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId    String

  coverLetter String?
  resume      String

  other Json?

  status JobApplicationStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PerformanceAppraisal {
  id String @id @default(cuid())

  appraisalDate      DateTime
  rating             Float
  comments           String
  goals              String
  achievements       String
  managerComments    String
  appraisalQuestions Json
  appraisalResponse  AppraisalResponse[]
}

model AppraisalResponse {
  id String @id @default(cuid())

  appraisalId          String
  performanceAppraisal PerformanceAppraisal @relation(fields: [appraisalId], references: [id])

  question String
  response String

  // @@index([employeeId])
  @@index([appraisalId])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  flier       String?
  description String?
  location    String?
  startDate   DateTime
  endDate     DateTime
  isPublished Boolean   @default(false)
  timezone    String    @default("GMT")
  createdBy   Employee  @relation(fields: [employeeId], references: [id])
  employeeId  String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
  @@index([employeeId])
}

// TODO: handle holidays (public and weekly holiday)

enum JobStatus {
  DRAFT
  PUBLISHED
  REJECTED
}

enum JobApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PaymentStatus {
  UNPAID
  PAID
}

enum AttendanceStatus {
  PUNCHED_IN
  PUNCHED_OUT
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

enum EmployeeRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum TeamRole {
  LEAD
  MEMBER
  ADMIN
}

enum NotificationType {
  GENERAL
  WORKSPACE
}

// TODO: use this on the frontend 
// enum Degree {
//   Bachelors
//   Masters
//   Phd
//   Associates
//   Professional
//   Certificate
//   Diploma
//   Honorary
// }
