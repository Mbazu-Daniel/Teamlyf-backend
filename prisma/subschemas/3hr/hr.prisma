// TODO: APPRAISAL, JOB, AWARDS, CONTRACT, EMPLOYEE DOCUMENT, COMPLAINT, TRAINING

model Employee {
  id            String    @id @default(cuid())
  fullName      String?
  displayName   String?
  email         String?
  birthDate     DateTime?
  gender        String?
  contactNumber String?
  address       Json?
  image         String?
  salary        Float?
  dateJoined    DateTime?
  leaveDate     DateTime?
  bloodGroup    String?
  ethnicRace    String?
  maritalStatus String?
  isActive      Boolean   @default(true)

  role EmployeeRole @default(MEMBER)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  spaces          Space[]
  subtasks        Subtask[]
  taskComments    TaskComment[]
  taskHistory     TaskHistory[]
  taskCreator     Task[]        @relation("TaskCreator")
  taskFiles       TaskFile[]
  projectCreator  Project[]     @relation("ProjectCreator")
  assignedManager Project[]     @relation("AssignedManager")

  employeeTeam EmployeeTeam[]
  invite       Invite[]

  taskCollaborator    TaskCollaborator[]
  projectCollaborator ProjectCollaborator[]
  subtaskCollaborator SubtaskCollaborator[]

  attendance   Attendance[]
  leave        Leave[]
  education    Education[]
  leaveComment LeaveComment[]
  leaveType    LeaveType[]
  job          Job[]
  timesheet    Timesheet[]
  payroll      Payroll[]

  messages               Message[]
  conversationsInitiated Conversation[]  @relation("EmployeeOne")
  conversationsReceived  Conversation[]  @relation("EmployeeTwo")
  directMessages         DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([workspaceId])
  @@index([id])
  @@index([role])
}

model Team {
  id    String  @id @default(cuid())
  name  String  @unique
  alias String?

  role TeamRole @default(MEMBER)


  workspaceId  String
  workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  employeeTeam EmployeeTeam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model EmployeeTeam {
  employeeId String
  teamId     String
  role       TeamRole @default(MEMBER)

  teamCreator Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([employeeId, teamId])
  @@index([employeeId])
  @@index([teamId])
}

model Attendance {
  id           String           @id @default(cuid())
  clockIn      DateTime
  clockOut     DateTime?
  totalHour    Float?
  late         Float?
  earlyLeaving Float?
  overtime     Float?
  break        Float?
  state        AttendanceStatus

  employeeId String
  punchedBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

model Timesheet {
  id          String   @id @default(cuid())
  date        DateTime
  hoursWorked Float
  remark      String?
  overtime    Float

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}
model Leave {
  id String @id @default(cuid())

  appliedDate   DateTime       @default(now())
  startDate     DateTime       @db.Date
  endDate       DateTime       @db.Date
  duration      Int
  reason        String
  leaveTypeId String
  leaveType     LeaveType      @relation(fields: [leaveTypeId], references: [id])
  reviewComment LeaveComment[]
  status        LeaveStatus    @default(PENDING)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([employeeId])
  @@index([leaveTypeId])

}

model LeaveType {
  id   String @id @default(cuid())
  name String

  leaves Leave[]

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([employeeId])
}

model LeaveComment {
  id String @id @default(cuid())

  comments String

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  leave   Leave?  @relation(fields: [leaveId], references: [id])
  leaveId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([leaveId])
}


model Education {
  id String @id @default(cuid())

  institution   String?
  courseOfStudy String?
  result        String?
  degree        String?
  startDate     DateTime?
  endDate       DateTime?
  status        Boolean   @default(true)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}



model PerformanceAppraisal {
  id String @id @default(cuid())

  appraisalDate      DateTime
  rating             Float
  comments           String
  goals              String
  achievements       String
  managerComments    String
  appraisalQuestions Json
  appraisalResponse  AppraisalResponse[]
}

model AppraisalResponse {
  id String @id @default(cuid())

  appraisalId          String
  performanceAppraisal PerformanceAppraisal @relation(fields: [appraisalId], references: [id])

  question String
  response String

  // @@index([employeeId])
  @@index([appraisalId])
}

// PAYMENT

model Payroll {
  id          String       @id @default(cuid())
  employeeId  String
  salary      Float
  payPeriod   String
  paymentDate DateTime
  deductions  Deduction[]
  commissions Commission[]
  bonuses     Bonus[]

  creatorId String
  createdBy Employee  @relation(fields: [creatorId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payslip   Payslip[]


}

model Deduction {
  id          String   @id @default(cuid())
  payroll     Payroll  @relation(fields: [payrollId], references: [id])
  payrollId   String
  name        String
  amount      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Payslip     Payslip? @relation(fields: [payslipId], references: [id])
  payslipId   String?
}

model Commission {
  id          String   @id @default(cuid())
  payroll     Payroll  @relation(fields: [payrollId], references: [id])
  payrollId   String
  name        String
  amount      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Payslip     Payslip? @relation(fields: [payslipId], references: [id])
  payslipId   String?
}

model Bonus {
  id          String @id @default(cuid())
  name        String
  amount      Float
  description String

  payrollId String
  payroll   Payroll  @relation(fields: [payrollId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Payslip   Payslip? @relation(fields: [payslipId], references: [id])
  payslipId String?
}

model Payslip {
  id            String       @id @default(cuid())
  payroll       Payroll      @relation(fields: [payrollId], references: [id])
  payrollId     String
  payPeriod     String
  paymentDate   DateTime
  employeeName  String
  employeeId    String
  grossEarnings Float
  netPay        Float
  taxes         Float
  deductions    Deduction[]
  commissions   Commission[]
  bonuses       Bonus[]
}

// Job Board 
model Job {
  id            String    @id @default(cuid())
  title         String
  category      String?
  requirement   String
  branch        String?
  email         String
  address       String
  salaryRange   Int
  noOfPositions Int
  company       String
  types         String
  education     String
  industry      String
  experience    String
  employee      Employee? @relation(fields: [employeeId], references: [id])
  employeeId    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum PaymentStatus {
  UNPAID
  PAID
}

enum AttendanceStatus {
  PUNCHED_IN
  PUNCHED_OUT
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EmployeeRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum TeamRole {
  LEAD
  MEMBER
  CONTRIBUTOR
  OBSERVER
}
