// Project Management 

// model Space {
//   id    String @id @default(cuid())
//   title String

//   tasks    Task[]
//   projects Project[]

//   workspaceId String
//   workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

//   employeeId String
//   createdBy  Employee @relation(fields: [employeeId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([title])
//   @@index([workspaceId])
//   @@index([employeeId])
// }

// Todo: Add Team to this model ?
// TODO: have priority and status model with thier colors but now in a json format where organanization can several status type and colors and assign them to a particular project 
model Project {
  id          String  @id @default(cuid())
  name        String
  category    String?
  description String?
  thumbnail   String?

  isFavourite     Boolean @default(false)
  projectProgress Int?

  customTaskStatus   CustomTaskStatus? @relation(fields: [customTaskStatusId], references: [id])
  customTaskStatusId String?

  customProjectPriority   CustomProjectPriority? @relation(fields: [customProjectPriorityId], references: [id])
  customProjectPriorityId String?

  projectStatus   ProjectStatus? @relation(fields: [projectStatusId], references: [id])
  projectStatusId String?

  // projectPriorityId String?
  // projectPriority   ProjectPriority? @relation(fields: [projectPriorityId], references: [id])

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  startDate DateTime  @default(now())
  dueDate   DateTime?

  tasks Task[]

  // spaceId String
  // spaces  Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  projectCollaborators ProjectCollaborator[]

  projectCreatorId String?
  projectCreator   Employee? @relation("ProjectCreator", fields: [projectCreatorId], references: [id], onDelete: Cascade)

  // can create another model to handle this to allow multiple managers
  managerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectCreatorId])
  @@index([managerId])
  @@index([workspaceId])
  @@index([customProjectPriorityId])
  @@index([customTaskStatusId])
  @@index([projectStatusId])
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String?
  notifications Boolean   @default(true)
  startDate     DateTime  @default(now())
  dueDate       DateTime?
  reminderDate  DateTime?

  subtasks     Subtask[]
  taskComments TaskComment[]
  taskHistory  TaskHistory[]
  labels       String

  employeeId String
  createdBy  Employee @relation("TaskCreator", fields: [employeeId], references: [id], onDelete: Cascade)

  taskCollaborators TaskCollaborator[]

  // spaceId String?
  // spaces  Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  customTaskStatus   CustomTaskStatus? @relation(fields: [customTaskStatusId], references: [id])
  customTaskStatusId String?
  taskFiles          TaskFile[]

  // workspaceId String
  // workspace   Workspace @relation(fields: [workspaceId], references: [id])

  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  milestoneId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // @@index([spaceId])
  @@index([employeeId])
  @@index([projectId])
  // @@index([workspaceId])
  @@index([milestoneId])
  @@index([customTaskStatusId])
}

model Subtask {
  id    String @id @default(cuid())
  title String

  startDate DateTime
  dueDate   DateTime?

  customTaskStatus   CustomTaskStatus? @relation(fields: [customTaskStatusId], references: [id])
  customTaskStatusId String?

  subtaskCollaborator SubtaskCollaborator[]

  employeeId String
  createdBy  Employee @relation(fields: [employeeId], references: [id])

  taskId String?
  tasks  Task?   @relation(fields: [taskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([taskId])
  @@index([customTaskStatusId])
}

model TaskComment {
  id   String @id @default(cuid())
  text String

  taskId String
  tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([taskId])
  @@index([employeeId])
}

model TaskHistory {
  id     String     @id @default(cuid())
  action TaskAction

  taskId String?
  tasks  Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([employeeId])
}

model TaskCollaborator {
  id String @id @default(cuid())

  taskId String
  tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([employeeId])
}

model ProjectCollaborator {
  id String @id @default(cuid())

  role      ProjectRole @default(MEMBER)
  projectId String
  projects  Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([employeeId])
}

model SubtaskCollaborator {
  id String @id @default(cuid())

  subtaskId String
  subtasks  Subtask @relation(fields: [subtaskId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subtaskId])
  @@index([employeeId])
}

// TODO: create, get all files, update file name, share file, delete file

model TaskFile {
  id          String    @id @default(cuid())
  name        String
  fileType    String
  fileSize    Int
  fileFormat  String
  fileUrl     String
  employeeId  String
  uploadedBy  Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  tasks  Task   @relation(fields: [taskId], references: [id])
  taskId String

  @@index([taskId])
  @@index([employeeId])
  @@index([workspaceId])
}

model TaskStatus {
  id                 String           @id @default(cuid())
  name               String
  color              String
  customTaskStatus   CustomTaskStatus @relation(fields: [customTaskStatusId], references: [id], onDelete: Cascade)
  customTaskStatusId String

  @@unique([name])
  @@index([customTaskStatusId])
}

model CustomTaskStatus {
  id               String       @id @default(cuid())
  name             String
  closedStatusName String?
  workspace        Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId      String
  projects         Project[]
  statuses         TaskStatus[]
  tasks            Task[]
  subtasks         Subtask[]

  @@index([workspaceId])
}

model ProjectPriority {
  id                      String                @id @default(cuid())
  name                    String
  color                   String
  customProjectPriority   CustomProjectPriority @relation(fields: [customProjectPriorityId], references: [id], onDelete: Cascade)
  customProjectPriorityId String

  @@index([customProjectPriorityId])
}

model CustomProjectPriority {
  id          String            @id @default(cuid())
  name        String
  workspace   Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  projects    Project[]
  priority    ProjectPriority[]

  @@index([workspaceId])
}

// TODO: Project don't need to have a custom status or Priority like the (Task Status) since project will be created  a status or priority can just be created on a fly and not neccessary used in other part of the application 
model ProjectStatus {
  id      String    @id @default(cuid())
  name    String
  color   String
  project Project[]

  @@unique([name])
}

// model CustomProjectPriority {
//   id               String       @id @default(cuid())
//   name             String
//   closedStatusName String?
//   statuses         ProjectStatus[]
//   projects         Project[]
// }

// model CustomProjectPriority {
//   id         String            @id @default(cuid())
//   name       String
//   priorities ProjectPriority[]
//   projects   Project[]
// }

model Milestone {
  id          String   @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  description String
  // status      TaskStatus @default(PENDING) //progress, completed, or delayed.
  task        Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ENUMS
enum TaskAction {
  ADDED_TASKS
  UPDATED_TASKS
  DELETED_TASKS
  COMPLETED_TASKS
  UNCOMPLETED_TASKS
  ADDED_COMMENTS_TO_TASKS
  UPDATED_COMMENTS_TO_TASKS
  DELETED_COMMENTS_TO_TASKS
  TASKS_COLLABORATOR_ADDED
  TASKS_COLLABORATOR_DELETED
  ADDED_SUBTASKS
}

enum ProjectAction {
  ADDED_PROJECTS
  UPDATED_PROJECTS
  DELETED_PROJECTS
  COMPLETED_PROJECTS
  UNCOMPLETED_PROJECTS
  ADDED_COMMENTS_TO_PROJECTS
  UPDATED_COMMENTS_TO_PROJECTS
  DELETED_COMMENTS_TO_PROJECTS
  PROJECTS_COLLABORATOR_ADDED
  PROJECTS_COLLABORATOR_DELETED
}

enum ProjectRole {
  LEAD
  GUEST
  MEMBER
  ADMIN
}

// enum TaskPriority {
//   HIGH
//   MEDIUM
//   LOW
//   CRITICAL
//   URGENT
//   NORMAL
//   MINOR
// }

// // get task status function for each of the  status
// enum TaskStatus {
//   TO_DO
//   IN_PROGRESS
//   PENDING
//   COMPLETED
//   CANCELED
//   DEFERRED
//   ON_HOLD
//   IN_REVIEW
// }
