// Chat communication model 
model Group {
  id          String      @id @default(cuid())
  name        String
  description String?     @db.Text
  thumbnail   String?
  type        MessageType @default(TEXT)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  messages Message[]

  groupMembers GroupMembers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([workspaceId])
}

model GroupMembers {
  id       String    @id @default(cuid())
  group    Group     @relation(fields: [groupId], references: [id])
  groupId  String
  member   Employee  @relation(fields: [memberId], references: [id])
  memberId String
  role     GroupRole @default(ADMIN)

  createdAt DateTime @default(now())

  @@index([groupId])
  @@index([memberId])
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text

  fileUrl String? @db.Text

  deleted Boolean @default(false)
  read    Boolean @default(false)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([groupId, employeeId])
}

model Conversation {
  id String @id @default(cuid())

  employeeOneId String
  employeeOne   Employee @relation("EmployeeOne", fields: [employeeOneId], references: [id], onDelete: Cascade)

  employeeTwoId String
  employeeTwo   Employee @relation("EmployeeTwo", fields: [employeeTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([employeeOneId, employeeTwoId])
  @@index([employeeTwoId, employeeOneId])
}

model DirectMessage {
  id      String  @id @default(cuid())
  content String  @db.Text
  fileUrl String? @db.Text

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, conversationId])
}

enum MessageType {
  TEXT
  AUDIO
  VIDEO
}

enum MessageStatus {
  READ
  DELIVERED
  SENT
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
  GUEST
}
