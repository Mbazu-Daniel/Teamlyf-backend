// Chat communication model 
model Group {
  id          String      @id @default(cuid())
  name        String
  description String?     @db.Text
  thumbnail   String?
  groupType   MessageType @default(TEXT)

  lastMessageAt DateTime?

  employeeId String
  createdBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  messages Message[]

  groupMembers GroupMembers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([workspaceId])
}

model GroupMembers {
  id       String          @id @default(cuid())
  group    Group           @relation(fields: [groupId], references: [id])
  groupId  String
  member   Employee        @relation(fields: [memberId], references: [id])
  memberId String
  role     GroupMemberRole @default(MEMBER)
  status   MemberStatus    @default(ACTIVE)

  createdAt DateTime @default(now())

  @@index([groupId])
  @@index([memberId])
}

model GroupMessage {
  id        String    @id @default(cuid())
  text      String    @db.Text
  fileUrl   String?   @db.Text
  deleted   Boolean   @default(false)
  read      Boolean   @default(false)
  readAt    DateTime?
  deletedAt DateTime?
  editedAt  DateTime?

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  parentMessageId String?
  parentMessage   GroupMessage? @relation("ThreadParentGroupMessage", fields: [parentMessageId], references: [id])

  replies GroupMessage[] @relation("ThreadParentGroupMessage")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([groupId, employeeId])
  @@index([parentMessageId])
}

model Conversation {
  id String @id @default(cuid())

  employeeOneId String
  employeeOne   Employee @relation("EmployeeOne", fields: [employeeOneId], references: [id], onDelete: Cascade)

  employeeTwoId String
  employeeTwo   Employee @relation("EmployeeTwo", fields: [employeeTwoId], references: [id], onDelete: Cascade)

  lastMessageAt DateTime?

  directMessages DirectMessage[]

  createdAt DateTime @default(now())

  @@unique([employeeOneId, employeeTwoId])
  @@index([employeeTwoId, employeeOneId])
}

model DirectMessage {
  id      String  @id @default(cuid())
  content String  @db.Text
  fileUrl String? @db.Text

  deleted   Boolean       @default(false)
  status    MessageStatus @default(SENT)
  readAt    DateTime?
  deletedAt DateTime?

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  parentMessageId String?
  parentMessage   DirectMessage?  @relation("ThreadParentDirectMessage", fields: [parentMessageId], references: [id])
  replies         DirectMessage[] @relation("ThreadParentDirectMessage")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, conversationId])
}

enum MessageType {
  TEXT
  AUDIO
  VIDEO
}

enum MessageStatus {
  READ
  DELIVERED
  SENT
}

enum GroupMemberRole {
  ADMIN
  MODERATOR
  MEMBER
  GUEST
}

enum MemberStatus {
  ACTIVE
  INACTIVE
}
