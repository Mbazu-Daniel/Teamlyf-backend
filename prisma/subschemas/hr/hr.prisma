model Employee {
  id            String    @id @default(cuid())
  fullName      String?
  displayName   String?
  email         String?
  birthDate     DateTime?
  gender        String?
  contactNumber String?
  // address
  street        String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  image         String?
  salary        Float?
  dateJoined    DateTime?
  leaveDate     DateTime?
  bloodGroup    String?
  isActive      Boolean   @default(true)

  role EmployeeRole @default(MEMBER)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  spaces            Space[]
  subtasks          Subtask[]
  taskComments      TaskComment[]
  taskHistory       TaskHistory[]
  departmentCreator Department[]

  taskCreator     Task[]     @relation("TaskCreator")
  taskFiles       TaskFile[]
  projectCreator  Project[]  @relation("ProjectCreator")
  assignedManager Project[]  @relation("AssignedManager")

  employeeDepartment EmployeeDepartment[]
  invite             Invite[]

  TaskCollaborator    TaskCollaborator[]
  ProjectCollaborator ProjectCollaborator[]
  subtaskCollaborator SubtaskCollaborator[]

  attendance Attendance[]
  leave      Leave[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Education Education[]

  @@index([userId, workspaceId, fullName, email, gender])
}

model Department {
  id    String  @id @default(cuid())
  name  String  @unique
  alias String?

  employeeId        String
  departmentCreator Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  workspaceId        String
  workspace          Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  employeeDepartment EmployeeDepartment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, workspaceId, name])
}

model EmployeeDepartment {
  id           String       @id @default(cuid())
  employeeId   String
  departmentId String
  role         EmployeeRole @default(MEMBER)

  employee   Employee   @relation(fields: [employeeId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id            String    @id @default(cuid())
  inTime        DateTime
  outTime       DateTime?
  ip            String?
  comment       String?
  punchBy       Int?
  totalHour     Float?
  inTimeStatus  String?
  outTimeStatus String?
  status        Boolean   @default(true)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Leave {
  id String @id @default(cuid())

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  leaveType       String
  leaveFrom       DateTime
  leaveTo         DateTime
  acceptLeaveFrom DateTime?
  acceptLeaveTo   DateTime?
  acceptLeaveBy   String? //add relationship with employeee
  leaveDuration   Int?
  reason          String?
  reviewComment   String?
  attachment      String?
  status          LeaveStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Education {
  id String @id @default(cuid())

  institution   String?
  courseOfStudy String?
  result        String?
  degree        String?
  startDate     DateTime?
  endDate       DateTime?
  status        Boolean   @default(true)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LeaveStatus {
  APPROVED
  PENDING
  CANCELED
  DECLINED
}