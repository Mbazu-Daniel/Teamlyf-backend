// TODO: files from tasks and any other attachments should be added to this file manager storage 
// TODO: try to understand how onDelete and onUpdate works on prisma so i don't delete folders when files are deleted
// TODO: update file manager model to handle task/project, chat, LMS etc files for better data integrity
// TODO: i want a situation when a file is created for a tasks, a folder can be created for the Project that houses that tasks, this goes the same for chats and LMS

// File model
model File {
    id             String @id @default(cuid())
    fileName       String
    fileType       String
    fileSize       Int
    fileUrl        String @db.LongText()
    fileIdentifier String

    description String?

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    employeeId String
    uploadBy   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    mappings FileFolderMapping[]
    versions FileVersion[]

    trashbin   TrashBin[]
    sharedLink SharedLink[]

    isTrashed Boolean @default(false)
    isStarred Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([workspaceId])
    @@index([employeeId])
}

// Folder model
model Folder {
    id          String  @id @default(cuid())
    name        String
    description String?

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    employeeId String
    employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    parentFolderId String?
    parentFolder   Folder?  @relation("ChildFolders", fields: [parentFolderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    childFolders   Folder[] @relation("ChildFolders")

    mappings FileFolderMapping[]

    trashbin   TrashBin[]
    sharedLink SharedLink[]

    isTrashed Boolean @default(false)
    isStarred Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([workspaceId])
    @@index([employeeId])
    @@index([parentFolderId])
}

model FileFolderMapping {
    id       String @id @default(cuid())
    fileId   String
    file     File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
    folderId String
    folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    
    @@index([fileId, folderId])
    @@index([fileId])
    @@index([folderId])
}

model FileVersion {
    id      String @id @default(cuid())
    file    File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
    fileId  String
    version Int

    timestamp DateTime //Timestamp of the version
    notes     String? // Additional notes or comments

    createdAt DateTime @default(now())

    @@index([fileId])
}

// TrashBin model for deleted files

// TODO: Additional attributes like reason for deletion, user who deleted it, etc., can be added.
model TrashBin {
    id         String   @id @default(cuid())
    folderId   String?
    folder     Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)
    fileId     String?
    file       File?    @relation(fields: [fileId], references: [id], onDelete: SetNull)
    employeeId String
    deletedBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    reason    String?
    deletedAt DateTime @default(now())

    @@index([folderId])
    @@index([fileId])
    @@index([employeeId])
}

enum SharedLinkVisibility {
    RESTRICTED
    EVERYONE
}

// Share model for file/folder sharing
model SharedLink {
    id         String               @id @default(cuid())
    file       File?                @relation(fields: [fileId], references: [id], onDelete: SetNull)
    fileId     String?
    folder     Folder?              @relation(fields: [folderId], references: [id], onDelete: SetNull)
    folderId   String?
    sharedWith SharedLinkEmployee[]
    // password   String?
    visibility SharedLinkVisibility @default(RESTRICTED)
    link       String?

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    @@index([folderId])
    @@index([fileId])
}

model SharedLinkEmployee {
    id           String     @id @default(cuid())
    sharedLink   SharedLink @relation(fields: [sharedLinkId], references: [id])
    sharedLinkId String
    employee     Employee   @relation(fields: [employeeId], references: [id])
    employeeId   String

    @@index([sharedLinkId])
    @@index([employeeId])
}

// ActivityLog model
// model FileActivityLog {
//     id         String   @id @default(cuid())
//     employee   Employee @relation(fields: [employeeId], references: [id])
//     employeeId String
//     action     String
//     timestamp  DateTime @default(now())
//     // Additional attributes
//     ipAddress  String? // IP address of the user performing the action
//     userAgent  String? // User agent of the client application
// }
