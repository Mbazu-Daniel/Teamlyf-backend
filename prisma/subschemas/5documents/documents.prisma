// TODO: files from tasks and any other attachments should be added to this file manager storage 
// TODO: try to understand how onDelete and onUpdate works on prisma so i don't delete folders when files are deleted

// File model
model File {
    id          String    @id @default(cuid())
    fileName    String
    fileType    String
    fileSize    Int
    fileFormat  String
    fileUrl     String
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    employeeId  String
    uploadBy    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
    folderId    String?
    folder      Folder?   @relation(fields: [folderId], references: [id], onDelete: NoAction)

    versions  FileVersion[]
    trashbin  TrashBin[]
    createdAt DateTime      @default(now())
    updatedAt DateTime

    @@index([workspaceId])
    @@index([employeeId])
    @@index([folderId])
}

// Folder model
model Folder {
    id String @id @default(cuid())

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    employeeId  String
    employee    Employee  @relation(fields: [employeeId], references: [id])

    parentFolderId String?
    parentFolder   Folder?  @relation("ChildFolders", fields: [parentFolderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    childFolders   Folder[] @relation("ChildFolders")

    files    File[]
    trashbin TrashBin[]

    createdAt DateTime @default(now())
    updatedAt DateTime

    @@index([workspaceId])
    @@index([employeeId])
    @@index([parentFolderId])
}

model FileVersion {
    id      String @id @default(cuid())
    file    File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
    fileId  String
    version Int

    timestamp DateTime //Timestamp of the version
    notes     String? // Additional notes or comments

    createdAt DateTime @default(now())

    @@index([fileId])
}

// TrashBin model for deleted files

// TODO: Additional attributes like reason for deletion, user who deleted it, etc., can be added.
model TrashBin {
    id          String   @id @default(cuid())
    folderId    String
    folder      Folder   @relation(fields: [folderId], references: [id])
    fileId      String
    file        File     @relation(fields: [fileId], references: [id])
    deletedBy   Employee @relation(fields: [deletedById], references: [id], onDelete: Cascade)
    deletedById String
    reason      String?
    deletedAt   DateTime @default(now())

    @@index([folderId])
    @@index([fileId])
    @@index([deletedById])
}

// Activity Log model// Share model for file/folder sharing
model SharedFileLink {
    id         String    @id @default(cuid())
    employee   Employee  @relation(fields: [employeeId], references: [id])
    employeeId String
    file       File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
    fileId     String?
    folder     Folder?   @relation(fields: [folderId], references: [id], onDelete: Cascade)
    folderId   String?
    // Additional attributes
    permission String // Permission level (e.g., read, write, admin)
    expiration DateTime? // Expiration date for the share

    @@index([folderId])
    @@index([fileId])
    @@index([employeeId])
}

// // ActivityLog model
// model ActivityLog {
//     id        String      @id @default(cuid())
//     employee      Employee     @relation(fields: [employeeId], references: [id])
//     employeeId    String
//     action    String
//     timestamp DateTime @default(now())
//     // Additional attributes
//     ipAddress String? // IP address of the user performing the action
//     userAgent String? // User agent of the client application
// }
