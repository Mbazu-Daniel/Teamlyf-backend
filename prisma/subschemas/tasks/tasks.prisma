// Project Management 

// subspace
model Space {
    id    String @id @default(cuid())
    title String

    tasks    Task[]
    projects Project[]

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    employeeId String
    createdBy  Employee @relation(fields: [employeeId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Todo: Add Team to this model ?

model Project {
    id          String  @id @default(cuid())
    name        String
    category    String?
    description String?
    thumbnail   String?

    isFavourite Boolean @default(false)

    priority      TaskPriority @default(NORMAL)
    priorityColor String?

    projectProgress Int?

    startDate DateTime  @default(now())
    dueDate   DateTime?

    tasks Task[]

    spaceId String
    spaces  Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

    projectCollaborators ProjectCollaborator[]

    projectCreatorId String?
    projectCreator   Employee? @relation("ProjectCreator", fields: [projectCreatorId], references: [id], onDelete: Cascade)

    // can create another model to handle this to allow multiple managers
    managerId       String?
    assignedManager Employee? @relation("AssignedManager", fields: [managerId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Task {
    id            String    @id @default(cuid())
    title         String
    description   String?
    notifications Boolean   @default(true)
    startDate     DateTime  @default(now())
    dueDate       DateTime?
    reminderDate  DateTime?

    subtasks     Subtask[]
    taskComments TaskComment[]
    taskHistory  TaskHistory[]
    taskLabels   TaskLabel[]

    employeeId String
    createdBy  Employee @relation("TaskCreator", fields: [employeeId], references: [id], onDelete: Cascade)

    taskCollaborators TaskCollaborator[]

    spaceId String?
    spaces  Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

    projectId String?
    project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

    status              TaskStatus            @default(TO_DO)
    statusColor         String?
    priority            TaskPriority          @default(NORMAL)
    priorityColor       String?
    subtaskCollaborator SubtaskCollaborator[]
    taskFiles           TaskFile[]

    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Subtask {
    id    String @id @default(cuid())
    title String

    startDate DateTime
    dueDate   DateTime?

    status              TaskStatus            @default(TO_DO)
    subtaskCollaborator SubtaskCollaborator[]

    employeeId String
    createdBy  Employee @relation(fields: [employeeId], references: [id])

    taskId String?
    tasks  Task?   @relation(fields: [taskId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TaskComment {
    id   String @id @default(cuid())
    text String

    taskId String
    tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    employeeId String
    employee   Employee @relation(fields: [employeeId], references: [id])
}

model TaskHistory {
    id     String     @id @default(cuid())
    action TaskAction

    taskId String?
    tasks  Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)

    employeeId String?
    employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TaskCollaborator {
    id String @id @default(cuid())

    taskId String
    tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

    employeeId String
    employee   Employee @relation(fields: [employeeId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProjectCollaborator {
    id String @id @default(cuid())

    projectId String
    projects  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    employeeId String
    employee   Employee @relation(fields: [employeeId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SubtaskCollaborator {
    id String @id @default(cuid())

    subtaskId String
    subtasks  Subtask @relation(fields: [subtaskId], references: [id], onDelete: Cascade)

    taskId String
    tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

    employeeId String
    employee   Employee @relation(fields: [employeeId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// TODO: create, get all files, update file name, share file, delete file

model TaskFile {
    id         String    @id @default(cuid())
    name       String
    file_type  String
    file_size  Int
    employeeId String?
    uploadedBy Employee? @relation(fields: [employeeId], references: [id])

    tasks  Task?   @relation(fields: [taskId], references: [id])
    taskId String?
}

model TaskLabel {
    id String @id @default(cuid())

    label    String

    tasks  Task?   @relation(fields: [taskId], references: [id])
    taskId String?
}

// ENUMS
enum TaskAction {
    ADDED_TASKS
    UPDATED_TASKS
    DELETED_TASKS
    COMPLETED_TASKS
    UNCOMPLETED_TASKS
    ADDED_COMMENTS_TO_TASKS
    UPDATED_COMMENTS_TO_TASKS
    DELETED_COMMENTS_TO_TASKS
    TASKS_COLLABORATOR_ADDED
    TASKS_COLLABORATOR_DELETED
    ADDED_SUBTASKS
}

enum ProjectAction {
    ADDED_PROJECTS
    UPDATED_PROJECTS
    DELETED_PROJECTS
    COMPLETED_PROJECTS
    UNCOMPLETED_PROJECTS
    ADDED_COMMENTS_TO_PROJECTS
    UPDATED_COMMENTS_TO_PROJECTS
    DELETED_COMMENTS_TO_PROJECTS
    PROJECTS_COLLABORATOR_ADDED
    PROJECTS_COLLABORATOR_DELETED
}

enum TaskPriority {
    HIGH
    MEDIUM
    LOW
    CRITICAL
    URGENT
    NORMAL
    MINOR
}

// get task status function for each of the  status
enum TaskStatus {
    TO_DO
    IN_PROGRESS
    PENDING
    COMPLETED
    CANCELED
    DEFERRED
    ON_HOLD
    IN_REVIEW
}



enum EmployeeRole {
    OWNER
    ADMIN
    MEMBER
    GUEST
}
