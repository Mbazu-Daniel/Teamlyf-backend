model User {
  id                 String       @id @default(cuid())
  email              String       @unique
  password           String
  role               UserRole     @default(BASIC)
  source             SourceType   @default(OTHER)
  authStrategy       AuthStrategy @default(EMAIL)
  googleId           String?      @unique
  githubId           String?      @unique
  passwordResetToken String?
  passwordResetAt    DateTime?
  workspaces         Workspace[]
  employees          Employee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id         String  @id @default(cuid())
  name       String  @unique
  logo       String?
  address    String?
  inviteCode String  @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)


  employees  Employee[]
  teams      Team[]
  invite     Invite[]
  spaces     Space[]
  tasks      Task[]
  // taskStatus       TaskStatus[]
  // taskPriority    TaskPriority[]
  // projectPriority ProjectPriority[]
  taskFiles  TaskFile[]
  leaves     Leave[]
  leaveTypes LeaveType[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([userId])
  @@index([name])
}

model Invite {
  id             String       @id @default(cuid())
  token          String
  email          String
  role           EmployeeRole @default(MEMBER)
  expirationDate DateTime

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  employeeId String
  invitedBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([workspaceId])
  @@map("Invite")
}

enum SourceType {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  GOOGLE
  OTHER
}

enum UserRole {
  BASIC
  ADMIN
  SUPER_ADMIN
}

enum AuthStrategy {
  EMAIL
  GITHUB
  GOOGLE
}
