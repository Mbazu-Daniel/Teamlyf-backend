// TODO: add Notification
model User {
  id           String       @id @default(cuid())
  email        String       @unique
  password     String
  role         UserRole     @default(BASIC)
  source       SourceType   @default(OTHER)
  authStrategy AuthStrategy @default(EMAIL_PASSWORD)
  googleId     String?      @unique
  githubId     String?      @unique

  passwordResetToken String?
  passwordResetAt    DateTime?
  refreshToken       String?

  workspaces            Workspace[]
  employees             Employee[]
  announcement          Announcement[]
  announcementRecipient AnnouncementRecipient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id         String  @id @default(cuid())
  name       String  @unique
  logo       String?
  address    String?
  inviteCode String  @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // ADMIN
  invite Invite[]

  // PM/TASKS
  projects        Project[]
  projectPriority CustomProjectPriority[]
  taskPriority    CustomTaskPriority[]
  taskStatus      CustomTaskStatus[]
  tasks           Task[]

  // HR
  employees     Employee[]
  teams         Team[]
  leaves        Leave[]
  leaveTypes    LeaveType[]
  jobs          Job[]
  leaveComment  LeaveComment[]
  group         Group[]
  events        Event[]
  notifications Notification[]

  // FILE MANAGER 
  files   File[]
  folders Folder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([name])
}

model Invite {
  id             String       @id @default(cuid())
  token          String
  email          String
  role           EmployeeRole @default(MEMBER)
  expirationDate DateTime

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  employeeId String
  invitedBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([workspaceId])
}

model AnnouncementRecipient {
  id             String @id @default(cuid())
  announcementId String
  recipientId    String
  recipient      User   @relation(fields: [recipientId], references: [id])

  announcements Announcement @relation(fields: [announcementId], references: [id])

  @@index([recipientId])
  @@index([announcementId])
}

model Announcement {
  id          String    @id @default(cuid())
  title       String
  description String
  isPublished Boolean   @default(true)
  sentAt      DateTime?

  userId    String
  createdBy User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  recipients AnnouncementRecipient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum SourceType {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  TIKTOK
  GOOGLE
  FRIEND
  WHATSAPP
  OTHER
}

enum UserRole {
  BASIC
  ADMIN
  SUPER_ADMIN
}

enum AuthStrategy {
  GITHUB
  GOOGLE
  EMAIL_PASSWORD
}
