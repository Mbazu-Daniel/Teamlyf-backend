//ðŸ§©Don't Edit this file.âœ¨Generated in Sun Mar 24 2024 22:02:07 GMT+0100 (West Africa Standard Time)âœ¨

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// TODO: add Notification
model User {
  id                 String       @id @default(cuid())
  email              String       @unique
  password           String
  role               UserRole     @default(BASIC)
  source             SourceType   @default(OTHER)
  authStrategy       AuthStrategy @default(EMAIL)
  googleId           String?      @unique
  githubId           String?      @unique
  passwordResetToken String?
  passwordResetAt    DateTime?
  workspaces         Workspace[]
  employees          Employee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id         String  @id @default(cuid())
  name       String  @unique
  logo       String?
  address    String?
  inviteCode String  @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  employees Employee[]
  teams     Team[]
  invite    Invite[]

  // PM/TASKS
  projects        Project[]
  projectPriority CustomProjectPriority[]
  taskPriority    CustomTaskPriority[]
  taskStatus      CustomTaskStatus[]
  tasks           Task[]

  // HR
  leaves       Leave[]
  leaveTypes   LeaveType[]
  jobs         Job[]
  leaveComment LeaveComment[]
  group        Group[]
  events       Event[]

  // FILE MANAGER 
  files   File[]
  folders Folder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([name])
}

model Invite {
  id             String       @id @default(cuid())
  token          String
  email          String
  role           EmployeeRole @default(MEMBER)
  expirationDate DateTime

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  employeeId String
  invitedBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([workspaceId])
  @@map("Invite")
}

enum SourceType {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  TIKTOK
  GOOGLE
  FRIEND
  WHATSAPP
  OTHER
}

enum UserRole {
  BASIC
  ADMIN
  SUPER_ADMIN
}

enum AuthStrategy {
  EMAIL
  GITHUB
  GOOGLE
}

// Project Management 
// TODO: Add Team to this model ?
// TODO: have priority and status model with thier colors but now in a json format where organanization can several status type and colors and assign them to a particular project 
// TODO: thinking of adding task priority model as well to track  task priority for  project

model Milestone {
  id          String          @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      MilestoneStatus @default(PLANNED)
  projects    Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String  @id @default(cuid())
  name        String  @unique
  category    String?
  description String?
  thumbnail   String?

  isFavourite     Boolean @default(false)
  projectProgress Int?

  startDate DateTime  @default(now())
  dueDate   DateTime?

  projectPriorityId String
  projectPriority   ProjectPriority @relation(fields: [projectPriorityId], references: [id])

  projectStatusId String
  projectStatus   ProjectStatus @relation(fields: [projectStatusId], references: [id])

  customTaskStatusId String
  customTaskStatus   CustomTaskStatus @relation(fields: [customTaskStatusId], references: [id])

  projectCreatorId String
  projectCreator   Employee @relation(fields: [projectCreatorId], references: [id], onDelete: Cascade)

  milestoneId String?
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  projectCollaborators ProjectCollaborator[]
  tasks                Task[]
  projectHistory       ProjectHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectCreatorId])
  @@index([workspaceId])
  @@index([milestoneId])
  @@index([customTaskStatusId])
  @@index([projectStatusId])
  @@index([projectPriorityId])
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String?
  notifications Boolean   @default(true)
  startDate     DateTime  @default(now())
  dueDate       DateTime?
  reminderDate  DateTime?

  subtasks     Subtask[]
  taskComments TaskComment[]
  taskHistory  TaskHistory[]
  tags         Json?

  employeeId String
  createdBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  taskCollaborators TaskCollaborator[]

  projectId String
  projects  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  taskStatus   TaskStatus @relation(fields: [taskStatusId], references: [id])
  taskStatusId String

  taskPriority   TaskPriority? @relation(fields: [taskPriorityId], references: [id])
  taskPriorityId String?

  taskFiles TaskFile[]

  workspaces  Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
  @@index([employeeId])
  @@index([projectId])
  @@index([taskPriorityId])
  @@index([taskStatusId])
}

model Subtask {
  id    String @id @default(cuid())
  title String

  startDate DateTime
  dueDate   DateTime?

  taskStatus   TaskStatus? @relation(fields: [taskStatusId], references: [id])
  taskStatusId String?

  taskPriority   TaskPriority? @relation(fields: [taskPriorityId], references: [id])
  taskPriorityId String?

  subtaskCollaborator SubtaskCollaborator[]

  employeeId String
  createdBy  Employee @relation(fields: [employeeId], references: [id])

  taskId String
  tasks  Task   @relation(fields: [taskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskStatusId])
  @@index([taskPriorityId])
  @@index([employeeId])
  @@index([taskId])
}

model TaskComment {
  id   String @id @default(cuid())
  text String

  taskId String
  tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([employeeId])
}

model ProjectHistory {
  id     String        @id @default(cuid())
  action ProjectAction

  projectId String
  projects  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([employeeId])
}

model TaskHistory {
  id     String     @id @default(cuid())
  action TaskAction

  taskId String
  tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([employeeId])
}

model TaskCollaborator {
  id String @id @default(cuid())

  taskId String
  tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([employeeId])
}

model ProjectCollaborator {
  id String @id @default(cuid())

  role      ProjectRole @default(MEMBER)
  projectId String
  projects  Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([employeeId])
}

model SubtaskCollaborator {
  id String @id @default(cuid())

  subtaskId String
  subtasks  Subtask @relation(fields: [subtaskId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subtaskId])
  @@index([employeeId])
}

// TODO: create, get all files, update file name, share file, delete file

model TaskFile {
  id         String   @id @default(cuid())
  name       String
  fileType   String
  fileSize   Int
  fileFormat String
  fileUrl    String
  employeeId String
  uploadedBy Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  tasks      Task     @relation(fields: [taskId], references: [id])
  taskId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([employeeId])
}

model CustomTaskStatus {
  id               String       @id @default(cuid())
  name             String
  closedStatusName String?
  workspace        Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId      String
  statuses         TaskStatus[]
  projects         Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model TaskStatus {
  id                 String           @id @default(cuid())
  name               String
  color              String
  customTaskStatus   CustomTaskStatus @relation(fields: [customTaskStatusId], references: [id], onDelete: Cascade)
  customTaskStatusId String
  tasks              Task[]
  subtasks           Subtask[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customTaskStatusId])
}

model CustomProjectPriority {
  id          String            @id @default(cuid())
  name        String
  workspace   Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  priority    ProjectPriority[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model ProjectPriority {
  id                      String                @id @default(cuid())
  name                    String
  color                   String
  projects                Project[]
  customProjectPriority   CustomProjectPriority @relation(fields: [customProjectPriorityId], references: [id], onDelete: Cascade)
  customProjectPriorityId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customProjectPriorityId])
}

model CustomTaskPriority {
  id          String         @id @default(cuid())
  name        String
  workspace   Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  priority    TaskPriority[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model TaskPriority {
  id                   String             @id @default(cuid())
  name                 String
  color                String
  tasks                Task[]
  subTasks             Subtask[]
  customTaskPriority   CustomTaskPriority @relation(fields: [customTaskPriorityId], references: [id], onDelete: Cascade)
  customTaskPriorityId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customTaskPriorityId])
}

// TODO: Project don't need to have a custom status or Priority like the (Task Status) since project will be created  a status or priority can just be created on a fly and not neccessary used in other part of the application 
model ProjectStatus {
  id      String    @id @default(cuid())
  name    String
  color   String
  project Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
}

// ENUMS
enum TaskAction {
  CREATED_TASKS
  UPDATED_TASKS
  DELETED_TASKS
  COMPLETED_TASKS
  UNCOMPLETED_TASKS
  ADDED_COMMENTS_TO_TASKS
  UPDATED_COMMENTS_TO_TASKS
  DELETED_COMMENTS_TO_TASKS
  TASKS_COLLABORATOR_ADDED
  TASKS_COLLABORATOR_REMOVED
  CREATED_SUBTASKS
}

enum ProjectAction {
  CREATED_PROJECTS
  UPDATED_PROJECTS
  DELETED_PROJECTS
  PROJECTS_COLLABORATOR_ADDED
  PROJECTS_COLLABORATOR_REMOVED
}

enum ProjectRole {
  LEAD
  GUEST
  MEMBER
  ADMIN
}

enum MilestoneStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
}

// TODO: APPRAISAL, JOB, AWARDS, CONTRACT, EMPLOYEE DOCUMENT, COMPLAINT, TRAINING
// TODO: add employee contact list to store some contact details ?

model Employee {
  id            String    @id @default(cuid())
  fullName      String?
  displayName   String?
  email         String?
  birthDate     DateTime?
  gender        String?
  contactNumber String?
  address       Json?
  image         String?
  salary        Float?
  dateJoined    DateTime?
  leaveDate     DateTime?
  bloodGroup    String?
  ethnicRace    String?
  maritalStatus String?
  isActive      Boolean   @default(true)

  role EmployeeRole @default(MEMBER)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  invite Invite[]

  // PM/TASKS
  subtasks            Subtask[]
  taskComments        TaskComment[]
  taskHistory         TaskHistory[]
  projectHistory      ProjectHistory[]
  tasks               Task[]
  taskFiles           TaskFile[]
  projects            Project[]
  employeeTeam        EmployeeTeam[]
  taskCollaborator    TaskCollaborator[]
  projectCollaborator ProjectCollaborator[]
  subtaskCollaborator SubtaskCollaborator[]

  // HR
  leave        Leave[]
  leaveComment LeaveComment[]
  leaveType    LeaveType[]
  educations   Education[]
  attendances  Attendance[]
  jobs         Job[]
  events       Event[]
  timesheets   Timesheet[]
  payroll      Payroll[]

  // CHAT
  messages               Message[]
  conversationsInitiated Conversation[]  @relation("EmployeeOne")
  conversationsReceived  Conversation[]  @relation("EmployeeTwo")
  directMessages         DirectMessage[]
  groups                 Group[]
  groupMembers           GroupMembers[]

  // FILE MANAGER 
  files           File[]
  folders         Folder[]
  sharedFileLinks SharedFileLink[]
  trashbins       TrashBin[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([userId])
  @@index([workspaceId])
  @@index([id])
  @@index([role])
}

model Team {
  id    String  @id @default(cuid())
  name  String
  alias String?

  role TeamRole @default(MEMBER)

  workspaceId  String
  workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  employeeTeam EmployeeTeam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

// Join table for many-to-many relation between Employee and Team
model EmployeeTeam {
  id         String   @id @default(cuid())
  employeeId String
  teamId     String
  role       TeamRole @default(MEMBER)

  teamCreator Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([teamId])
}

model Leave {
  id String @id @default(cuid())

  appliedDate DateTime @default(now())
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date
  duration    Int
  reason      String?

  //  leaveResponseFrom DateTime? // accept leave startDate
  // leaveResponseTo   DateTime? // accepted leave endDate 
  leaveResponseBy String? // the admin that responded to the leave
  leaveTypeId     String
  status          LeaveStatus @default(PENDING)

  leaveType LeaveType      @relation(fields: [leaveTypeId], references: [id])
  comments  LeaveComment[]

  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([employeeId])
  @@index([leaveTypeId])
  @@index([workspaceId])
}

model LeaveType {
  id   String @id @default(cuid())
  name String

  leaves Leave[]

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
  @@index([employeeId])
  @@index([workspaceId])
}

model LeaveComment {
  id String @id @default(cuid())

  comments String

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  leave   Leave  @relation(fields: [leaveId], references: [id])
  leaveId String

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())

  updatedAt DateTime @updatedAt

  @@index([leaveId])
  @@index([workspaceId])
  @@index([employeeId])
}

model LeaveHistory {
  id            String       @id @default(cuid())
  leaveId       String
  oldStatus     LeaveStatus
  updatedDate   DateTime?
  updatedStatus LeaveStatus?
  updatedBy     String?
}

model Attendance {
  id           String           @id @default(cuid())
  clockIn      DateTime
  clockOut     DateTime?
  totalHour    Float?
  late         Float?
  earlyLeaving Float?
  overtime     Float?
  break        Float?
  state        AttendanceStatus

  employeeId String
  punchedBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

model Education {
  id String @id @default(cuid())

  institution   String
  courseOfStudy String
  result        String?
  degree        String
  startDate     DateTime?
  endDate       DateTime?
  status        Boolean   @default(true)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

model Timesheet {
  id          String   @id @default(cuid())
  date        DateTime
  hoursWorked Float
  remark      String?
  overtime    Float

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

// PAYMENT

model Payroll {
  id          String       @id @default(cuid())
  employeeId  String
  salary      Float
  payPeriod   String
  paymentDate DateTime
  deductions  Deduction[]
  commissions Commission[]
  bonuses     Bonus[]

  creatorId String
  createdBy Employee  @relation(fields: [creatorId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payslip   Payslip[]
}

model Deduction {
  id          String   @id @default(cuid())
  payroll     Payroll  @relation(fields: [payrollId], references: [id])
  payrollId   String
  name        String
  amount      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Payslip     Payslip? @relation(fields: [payslipId], references: [id])
  payslipId   String?
}

model Commission {
  id          String   @id @default(cuid())
  payroll     Payroll  @relation(fields: [payrollId], references: [id])
  payrollId   String
  name        String
  amount      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Payslip     Payslip? @relation(fields: [payslipId], references: [id])
  payslipId   String?
}

model Bonus {
  id          String @id @default(cuid())
  name        String
  amount      Float
  description String

  payrollId String
  payroll   Payroll  @relation(fields: [payrollId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Payslip   Payslip? @relation(fields: [payslipId], references: [id])
  payslipId String?
}

model Payslip {
  id            String       @id @default(cuid())
  payroll       Payroll      @relation(fields: [payrollId], references: [id])
  payrollId     String
  payPeriod     String
  paymentDate   DateTime
  employeeName  String
  employeeId    String
  grossEarnings Float
  netPay        Float
  taxes         Float
  deductions    Deduction[]
  commissions   Commission[]
  bonuses       Bonus[]
}

// Job Board 
model Job {
  id            String                 @id @default(cuid())
  title         String
  description   String
  category      String?
  branch        String?
  email         String?
  address       String?
  salaryRange   Int?
  noOfPositions Int?
  // type          String
  // education     String
  // industry      String
  // experience    String
  isActive      Boolean                @default(true)
  jobApplicant  JobApplicantResponse[]

  createdBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
  @@index([employeeId])
}

// TODO: Recieves external user applications
// TODO: When application is received send an email to the applicant
// TODO: When application is rejected send a custom email 
// TODO: When application is accepted send a custom email 

model JobApplicantResponse {
  id       String @id @default(cuid())
  fullName String
  email    String
  job      Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId    String

  coverLetter String?
  resume      String

  other Json?

  status JobApplicationStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PerformanceAppraisal {
  id String @id @default(cuid())

  appraisalDate      DateTime
  rating             Float
  comments           String
  goals              String
  achievements       String
  managerComments    String
  appraisalQuestions Json
  appraisalResponse  AppraisalResponse[]
}

model AppraisalResponse {
  id String @id @default(cuid())

  appraisalId          String
  performanceAppraisal PerformanceAppraisal @relation(fields: [appraisalId], references: [id])

  question String
  response String

  // @@index([employeeId])
  @@index([appraisalId])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  flier       String?
  description String?
  location    String?
  startDate   DateTime
  endDate     DateTime
  isPublished Boolean   @default(false)
  timezone    String    @default("GMT")
  createdBy   Employee  @relation(fields: [createdById], references: [id])
  createdById String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
  @@index([createdById])
}

// TODO: handle holidays (public and weekly holiday)

enum JobStatus {
  DRAFT
  PUBLISHED
  REJECTED
}

enum JobApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PaymentStatus {
  UNPAID
  PAID
}

enum AttendanceStatus {
  PUNCHED_IN
  PUNCHED_OUT
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

enum EmployeeRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum TeamRole {
  LEAD
  MEMBER
  ADMIN
}

// TODO: use this on the frontend 
// enum Degree {
//   Bachelors
//   Masters
//   Phd
//   Associates
//   Professional
//   Certificate
//   Diploma
//   Honorary
// }
// Chat communication model 
model Group {
  id          String      @id @default(cuid())
  name        String
  description String?     @db.Text
  thumbnail   String?
  type        MessageType @default(TEXT)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  messages Message[]

  groupMembers GroupMembers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([workspaceId])
}

model GroupMembers {
  id       String    @id @default(cuid())
  group    Group     @relation(fields: [groupId], references: [id])
  groupId  String
  member   Employee  @relation(fields: [memberId], references: [id])
  memberId String
  role     GroupRole @default(ADMIN)

  createdAt DateTime @default(now())

  @@index([groupId])
  @@index([memberId])
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text

  fileUrl String? @db.Text

  deleted Boolean @default(false)
  read    Boolean @default(false)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([groupId, employeeId])
}

model Conversation {
  id String @id @default(cuid())

  employeeOneId String
  employeeOne   Employee @relation("EmployeeOne", fields: [employeeOneId], references: [id], onDelete: Cascade)

  employeeTwoId String
  employeeTwo   Employee @relation("EmployeeTwo", fields: [employeeTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([employeeOneId, employeeTwoId])
  @@index([employeeTwoId, employeeOneId])
}

model DirectMessage {
  id      String  @id @default(cuid())
  content String  @db.Text
  fileUrl String? @db.Text

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, conversationId])
}

enum MessageType {
  TEXT
  AUDIO
  VIDEO
}

enum MessageStatus {
  READ
  DELIVERED
  SENT
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
  GUEST
}

// TODO: files from tasks and any other attachments should be added to this file manager storage 
// TODO: try to understand how onDelete and onUpdate works on prisma so i don't delete folders when files are deleted
// TODO: update file manager model to handle task/project, chat, LMS etc files for better data integrity
// TODO: i want a situation when a file is created for a tasks, a folder can be created for the Project that houses that tasks, this goes the same for chats and LMS

enum FileSource {
  TASK
  CHAT
  PROJECT
  LMS
}

// File model
model File {
  id         String @id @default(cuid())
  fileName   String
  fileType   String
  fileSize   Int
  fileFormat String
  fileUrl    String

  source      FileSource // Source of the file (e.g., Task, Project, Chat, LMS)
  sourceId    String // ID of the entity the file belongs to (e.g., Task ID, Project ID)
  description String?

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  employeeId  String
  uploadBy    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  folderId    String?
  folder      Folder?   @relation(fields: [folderId], references: [id], onDelete: NoAction)

  versions       FileVersion[]
  trashbin       TrashBin[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  SharedFileLink SharedFileLink[]

  @@index([workspaceId])
  @@index([employeeId])
  @@index([folderId])
}

// Folder model
model Folder {
  id          String    @id @default(cuid())
  name        String
  description String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id])

  parentFolderId String?
  parentFolder   Folder?  @relation("ChildFolders", fields: [parentFolderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childFolders   Folder[] @relation("ChildFolders")

  files    File[]
  trashbin TrashBin[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  SharedFileLink SharedFileLink[]

  @@index([workspaceId])
  @@index([employeeId])
  @@index([parentFolderId])
}

model FileVersion {
  id      String @id @default(cuid())
  file    File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId  String
  version Int

  timestamp DateTime //Timestamp of the version
  notes     String? // Additional notes or comments

  createdAt DateTime @default(now())

  @@index([fileId])
}

// TrashBin model for deleted files

// TODO: Additional attributes like reason for deletion, user who deleted it, etc., can be added.
model TrashBin {
  id          String   @id @default(cuid())
  folderId    String
  folder      Folder   @relation(fields: [folderId], references: [id])
  fileId      String
  file        File     @relation(fields: [fileId], references: [id])
  deletedBy   Employee @relation(fields: [deletedById], references: [id], onDelete: Cascade)
  deletedById String
  reason      String?
  deletedAt   DateTime @default(now())

  @@index([folderId])
  @@index([fileId])
  @@index([deletedById])
}

// Activity Log model// Share model for file/folder sharing
model SharedFileLink {
  id         String    @id @default(cuid())
  employee   Employee  @relation(fields: [employeeId], references: [id])
  employeeId String
  file       File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId     String?
  folder     Folder?   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId   String?
  // Additional attributes
  permission String // Permission level (e.g., read, write, admin)
  expiration DateTime? // Expiration date for the share

  @@index([folderId])
  @@index([fileId])
  @@index([employeeId])
}

// // ActivityLog model
// model ActivityLog {
//     id        String      @id @default(cuid())
//     employee      Employee     @relation(fields: [employeeId], references: [id])
//     employeeId    String
//     action    String
//     timestamp DateTime @default(now())
//     // Additional attributes
//     ipAddress String? // IP address of the user performing the action
//     userAgent String? // User agent of the client application
// }
