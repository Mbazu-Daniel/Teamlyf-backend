//ðŸ§©Don't Edit this file.âœ¨Generated in Sun Nov 05 2023 07:55:10 GMT+0100 (West Africa Standard Time)âœ¨

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String      @id @default(cuid())
  email              String      @unique
  password           String
  role               UserRole    @default(USER)
  source             SourceType  @default(OTHER)
  passwordResetToken String?
  passwordResetAt    DateTime?
  workspaces         Workspace[]
  employees          Employee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id         String  @id @default(cuid())
  name       String  @unique
  logo       String?
  address    String?
  inviteCode String  @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  employees   Employee[]
  departments Department[]
  invite      Invite[]
  spaces      Space[]
  tasks       Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, name])
}

model Invite {
  id             String       @id @default(cuid())
  token          String
  email          String
  role           EmployeeRole @default(MEMBER)
  expirationDate DateTime

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  employeeId String
  invitedBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Invite")
}

enum SourceType {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  GOOGLE
  OTHER
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model Employee {
  id            String    @id @default(cuid())
  fullName      String?
  displayName   String?
  email         String?
  birthDate     DateTime?
  gender        String?
  contactNumber String?
  address       Json?

  image         String?
  salary        Float?
  dateJoined    DateTime?
  leaveDate     DateTime?
  bloodGroup    String?
  ethnicRace    String?
  maritalStatus String?
  isActive      Boolean   @default(true)

  role EmployeeRole @default(MEMBER)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  spaces            Space[]
  subtasks          Subtask[]
  taskComments      TaskComment[]
  taskHistory       TaskHistory[]
  departmentCreator Department[]

  taskCreator     Task[]     @relation("TaskCreator")
  taskFiles       TaskFile[]
  projectCreator  Project[]  @relation("ProjectCreator")
  assignedManager Project[]  @relation("AssignedManager")

  employeeDepartment EmployeeDepartment[]
  invite             Invite[]

  TaskCollaborator    TaskCollaborator[]
  ProjectCollaborator ProjectCollaborator[]
  subtaskCollaborator SubtaskCollaborator[]

  attendance Attendance[]
  leave      Leave[]
  Education  Education[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Payslip      Payslip[]
  LeaveComment LeaveComment[]
  LeaveType    LeaveType[]
  Job          Job[]

  @@index([userId, workspaceId, fullName, email, gender])
}

model Department {
  id    String  @id @default(cuid())
  name  String  @unique
  alias String?

  employeeId        String
  departmentCreator Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  workspaceId        String
  workspace          Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  employeeDepartment EmployeeDepartment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, workspaceId, name])
}

model EmployeeDepartment {
  id           String       @id @default(cuid())
  employeeId   String
  departmentId String
  role         EmployeeRole @default(MEMBER)

  employee   Employee   @relation(fields: [employeeId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id            String           @id @default(cuid())
  punchInTime   DateTime
  punchOutTime  DateTime?
  ip            String?
  comment       String?
  punchBy       Int?
  totalHour     Float?
  inTimeStatus  String?
  outTimeStatus String?
  state         AttendanceStatus
  employeeId    String
  employee      Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Leave {
  id String @id @default(cuid())

  employeeId String
  acceptedBy Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  startDate     DateTime
  endDate       DateTime
  appliedDate   DateTime?
  acceptedDate  DateTime?
  leaveDuration Int?
  reason        String?
  leaveType     LeaveType[]
  reviewComment LeaveComment[]
  attachment    String?
  status        LeaveStatus    @default(PENDING)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Education {
  id String @id @default(cuid())

  institution   String?
  courseOfStudy String?
  result        String?
  degree        String?
  startDate     DateTime?
  endDate       DateTime?
  status        Boolean   @default(true)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payslip {
  id                String        @id @default(cuid())
  salaryMonth       Int
  salaryYear        Int
  salary            Float
  paidLeave         Int
  unpaidLeave       Int
  monthlyHoliday    Int
  publicHoliday     Int
  workDay           Int
  shiftWiseWorkHour Float
  monthlyWorkHour   Float
  hourlySalary      Float
  workingHour       Float
  salaryPayable     Float
  bonus             Float
  bonusComment      String?
  deduction         Float
  deductionComment  String?
  totalPayable      Float
  paymentStatus     PaymentStatus @default(UNPAID)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, salaryMonth, salaryYear])
}

model LeaveComment {
  id       String @id @default(cuid())
  comments String

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  leave   Leave?  @relation(fields: [leaveId], references: [id])
  leaveId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeaveType {
  id    String @id @default(cuid())
  title String

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  leave   Leave?  @relation(fields: [leaveId], references: [id])
  leaveId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PerformanceAppraisal {
  id String @id @default(cuid())

  appraisalDate      DateTime
  rating             Float
  comments           String
  goals              String
  achievements       String
  managerComments    String
  appraisalQuestions Json
  AppraisalResponse  AppraisalResponse[]
}

model AppraisalResponse {
  id String @id @default(cuid())

  appraisalId          String
  performanceAppraisal PerformanceAppraisal @relation(fields: [appraisalId], references: [id])

  question String
  response String
}

// Job Board 
model Job {
  id            String    @id @default(cuid())
  title         String
  description   String
  email         String
  address       String
  salaryRange   Int
  noOfPositions Int
  company       String
  types         String
  education     String
  industry      String
  experience    String
  employee      Employee? @relation(fields: [employeeId], references: [id])
  employeeId    String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}

enum PaymentStatus {
  UNPAID
  PAID
}

enum AttendanceStatus {
  PUNCHED_IN
  PUNCHED_OUT
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

// Project Management 

// subspace
model Space {
  id    String @id @default(cuid())
  title String

  tasks    Task[]
  projects Project[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  employeeId String
  createdBy  Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Todo: Add Team to this model ?

model Project {
  id          String  @id @default(cuid())
  name        String
  category    String?
  description String?
  thumbnail   String?

  isFavourite Boolean @default(false)

  status      TaskStatus @default(TO_DO)
  statusColor String?

  projectProgress Int?

  startDate DateTime  @default(now())
  dueDate   DateTime?

  tasks Task[]

  spaceId String
  spaces  Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  projectCollaborators ProjectCollaborator[]

  projectCreatorId String?
  projectCreator   Employee? @relation("ProjectCreator", fields: [projectCreatorId], references: [id], onDelete: Cascade)

  // can create another model to handle this to allow multiple managers
  managerId       String?
  assignedManager Employee? @relation("AssignedManager", fields: [managerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String?
  notifications Boolean   @default(true)
  startDate     DateTime  @default(now())
  dueDate       DateTime?
  reminderDate  DateTime?

  subtasks     Subtask[]
  taskComments TaskComment[]
  taskHistory  TaskHistory[]
  taskLabels   TaskLabel[]

  employeeId String
  createdBy  Employee @relation("TaskCreator", fields: [employeeId], references: [id], onDelete: Cascade)

  taskCollaborators TaskCollaborator[]

  spaceId String?
  spaces  Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  status        TaskStatus   @default(TO_DO)
  statusColor   String?
  priority      TaskPriority @default(NORMAL)
  priorityColor String?

  subtaskCollaborator SubtaskCollaborator[]
  taskFiles           TaskFile[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  milestoneId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Subtask {
  id    String @id @default(cuid())
  title String

  startDate DateTime
  dueDate   DateTime?

  status TaskStatus @default(TO_DO)

  subtaskCollaborator SubtaskCollaborator[]

  employeeId String
  createdBy  Employee @relation(fields: [employeeId], references: [id])

  taskId String?
  tasks  Task?   @relation(fields: [taskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskComment {
  id   String @id @default(cuid())
  text String

  taskId String
  tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model TaskHistory {
  id     String     @id @default(cuid())
  action TaskAction

  taskId String?
  tasks  Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskCollaborator {
  id String @id @default(cuid())

  taskId String
  tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectCollaborator {
  id String @id @default(cuid())

  projectId String
  projects  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubtaskCollaborator {
  id String @id @default(cuid())

  subtaskId String
  subtasks  Subtask @relation(fields: [subtaskId], references: [id], onDelete: Cascade)

  taskId String
  tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// TODO: create, get all files, update file name, share file, delete file

model TaskFile {
  id         String    @id @default(cuid())
  name       String
  file_type  String
  file_size  Int
  employeeId String?
  uploadedBy Employee? @relation(fields: [employeeId], references: [id])

  tasks  Task?   @relation(fields: [taskId], references: [id])
  taskId String?
}

model TaskLabel {
  id String @id @default(cuid())

  label String

  tasks  Task?   @relation(fields: [taskId], references: [id])
  taskId String?
}

// model TaskStatus {
//     id        String     @id @default(cuid())
//     name      String
//     color     String?
//     status    Boolean @default(true)
//     task      Task[]
//     project Project[]
//     subTask Subtask[]

//     @@unique([name])
// }

// model TaskPriority {
//     id     String     @id @default(cuid())
//     name   String  @unique
//     color String?
//     status Boolean @default(true)
//     task   Task[]
// }

model Milestone {
  id          String     @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  description String
  status      TaskStatus @default(PENDING) //progress, completed, or delayed.
  task        Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ENUMS
enum TaskAction {
  ADDED_TASKS
  UPDATED_TASKS
  DELETED_TASKS
  COMPLETED_TASKS
  UNCOMPLETED_TASKS
  ADDED_COMMENTS_TO_TASKS
  UPDATED_COMMENTS_TO_TASKS
  DELETED_COMMENTS_TO_TASKS
  TASKS_COLLABORATOR_ADDED
  TASKS_COLLABORATOR_DELETED
  ADDED_SUBTASKS
}

enum ProjectAction {
  ADDED_PROJECTS
  UPDATED_PROJECTS
  DELETED_PROJECTS
  COMPLETED_PROJECTS
  UNCOMPLETED_PROJECTS
  ADDED_COMMENTS_TO_PROJECTS
  UPDATED_COMMENTS_TO_PROJECTS
  DELETED_COMMENTS_TO_PROJECTS
  PROJECTS_COLLABORATOR_ADDED
  PROJECTS_COLLABORATOR_DELETED
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
  CRITICAL
  URGENT
  NORMAL
  MINOR
}

// get task status function for each of the  status
enum TaskStatus {
  TO_DO
  IN_PROGRESS
  PENDING
  COMPLETED
  CANCELED
  DEFERRED
  ON_HOLD
  IN_REVIEW
}

enum EmployeeRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}
