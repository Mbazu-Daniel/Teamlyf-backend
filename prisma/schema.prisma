//ðŸ§©Don't Edit this file.âœ¨Generated in Tue Jan 23 2024 03:08:56 GMT+0100 (West Africa Standard Time)âœ¨

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 String       @id @default(cuid())
  email              String       @unique
  password           String
  role               UserRole     @default(BASIC)
  source             SourceType   @default(OTHER)
  authStrategy       AuthStrategy @default(EMAIL)
  googleId           String?      @unique
  githubId           String?      @unique
  passwordResetToken String?
  passwordResetAt    DateTime?
  workspaces         Workspace[]
  employees          Employee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id         String  @id @default(cuid())
  name       String  @unique
  logo       String?
  address    String?
  inviteCode String  @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  employees       Employee[]
  teams           Team[]
  invite          Invite[]
  projects        Project[]
  projectPriority CustomProjectPriority[]
  // tasks      Task[]
  taskStatus      CustomTaskStatus[]
  taskFiles       TaskFile[]
  leaves          Leave[]
  leaveTypes      LeaveType[]
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  LeaveComment    LeaveComment[]
  Group           Group[]

  @@index([userId])
  @@index([name])
}

model Invite {
  id             String       @id @default(cuid())
  token          String
  email          String
  role           EmployeeRole @default(MEMBER)
  expirationDate DateTime

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  employeeId String
  invitedBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([workspaceId])
  @@map("Invite")
}

enum SourceType {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  TIKTOK
  GOOGLE
  FRIEND
  WHATSAPP
  OTHER
}

enum UserRole {
  BASIC
  ADMIN
  SUPER_ADMIN
}

enum AuthStrategy {
  EMAIL
  GITHUB
  GOOGLE
}

// Project Management 

// model Space {
//   id    String @id @default(cuid())
//   title String

//   tasks    Task[]
//   projects Project[]

//   workspaceId String
//   workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

//   employeeId String
//   createdBy  Employee @relation(fields: [employeeId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([title])
//   @@index([workspaceId])
//   @@index([employeeId])
// }

// Todo: Add Team to this model ?
// TODO: have priority and status model with thier colors but now in a json format where organanization can several status type and colors and assign them to a particular project 
model Project {
  id          String  @id @default(cuid())
  name        String
  category    String?
  description String?
  thumbnail   String?

  isFavourite     Boolean @default(false)
  projectProgress Int?

  customTaskStatus   CustomTaskStatus? @relation(fields: [customTaskStatusId], references: [id])
  customTaskStatusId String?

  customProjectPriority   CustomProjectPriority? @relation(fields: [customProjectPriorityId], references: [id])
  customProjectPriorityId String?

  projectStatus   ProjectStatus? @relation(fields: [projectStatusId], references: [id])
  projectStatusId String?

  // projectPriorityId String?
  // projectPriority   ProjectPriority? @relation(fields: [projectPriorityId], references: [id])

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  startDate DateTime  @default(now())
  dueDate   DateTime?

  tasks Task[]

  // spaceId String
  // spaces  Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  projectCollaborators ProjectCollaborator[]

  projectCreatorId String?
  projectCreator   Employee? @relation("ProjectCreator", fields: [projectCreatorId], references: [id], onDelete: Cascade)

  // can create another model to handle this to allow multiple managers
  managerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectCreatorId])
  @@index([managerId])
  @@index([workspaceId])
  @@index([customProjectPriorityId])
  @@index([customTaskStatusId])
  @@index([projectStatusId])
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String?
  notifications Boolean   @default(true)
  startDate     DateTime  @default(now())
  dueDate       DateTime?
  reminderDate  DateTime?

  subtasks     Subtask[]
  taskComments TaskComment[]
  taskHistory  TaskHistory[]
  labels       String

  employeeId String
  createdBy  Employee @relation("TaskCreator", fields: [employeeId], references: [id], onDelete: Cascade)

  taskCollaborators TaskCollaborator[]

  // spaceId String?
  // spaces  Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  customTaskStatus   CustomTaskStatus? @relation(fields: [customTaskStatusId], references: [id])
  customTaskStatusId String?
  taskFiles          TaskFile[]

  // workspaceId String
  // workspace   Workspace @relation(fields: [workspaceId], references: [id])

  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  milestoneId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // @@index([spaceId])
  @@index([employeeId])
  @@index([projectId])
  // @@index([workspaceId])
  @@index([milestoneId])
  @@index([customTaskStatusId])
}

model Subtask {
  id    String @id @default(cuid())
  title String

  startDate DateTime
  dueDate   DateTime?

  customTaskStatus   CustomTaskStatus? @relation(fields: [customTaskStatusId], references: [id])
  customTaskStatusId String?

  subtaskCollaborator SubtaskCollaborator[]

  employeeId String
  createdBy  Employee @relation(fields: [employeeId], references: [id])

  taskId String?
  tasks  Task?   @relation(fields: [taskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([taskId])
  @@index([customTaskStatusId])
}

model TaskComment {
  id   String @id @default(cuid())
  text String

  taskId String
  tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([taskId])
  @@index([employeeId])
}

model TaskHistory {
  id     String     @id @default(cuid())
  action TaskAction

  taskId String?
  tasks  Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([employeeId])
}

model TaskCollaborator {
  id String @id @default(cuid())

  taskId String
  tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([employeeId])
}

model ProjectCollaborator {
  id String @id @default(cuid())

  role      ProjectRole @default(MEMBER)
  projectId String
  projects  Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([employeeId])
}

model SubtaskCollaborator {
  id String @id @default(cuid())

  subtaskId String
  subtasks  Subtask @relation(fields: [subtaskId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subtaskId])
  @@index([employeeId])
}

// TODO: create, get all files, update file name, share file, delete file

model TaskFile {
  id          String    @id @default(cuid())
  name        String
  fileType    String
  fileSize    Int
  fileFormat  String
  fileUrl     String
  employeeId  String
  uploadedBy  Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  tasks  Task   @relation(fields: [taskId], references: [id])
  taskId String

  @@index([taskId])
  @@index([employeeId])
  @@index([workspaceId])
}

model TaskStatus {
  id                 String           @id @default(cuid())
  name               String
  color              String
  customTaskStatus   CustomTaskStatus @relation(fields: [customTaskStatusId], references: [id], onDelete: Cascade)
  customTaskStatusId String

  @@unique([name])
  @@index([customTaskStatusId])
}

model CustomTaskStatus {
  id               String       @id @default(cuid())
  name             String
  closedStatusName String?
  workspace        Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId      String
  projects         Project[]
  statuses         TaskStatus[]
  tasks            Task[]
  subtasks         Subtask[]

  @@index([workspaceId])
}

model ProjectPriority {
  id                      String                @id @default(cuid())
  name                    String
  color                   String
  customProjectPriority   CustomProjectPriority @relation(fields: [customProjectPriorityId], references: [id], onDelete: Cascade)
  customProjectPriorityId String

  @@index([customProjectPriorityId])
}

model CustomProjectPriority {
  id          String            @id @default(cuid())
  name        String
  workspace   Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  projects    Project[]
  priority    ProjectPriority[]

  @@index([workspaceId])
}

// TODO: Project don't need to have a custom status or Priority like the (Task Status) since project will be created  a status or priority can just be created on a fly and not neccessary used in other part of the application 
model ProjectStatus {
  id      String    @id @default(cuid())
  name    String
  color   String
  project Project[]

  @@unique([name])
}

// model CustomProjectPriority {
//   id               String       @id @default(cuid())
//   name             String
//   closedStatusName String?
//   statuses         ProjectStatus[]
//   projects         Project[]
// }

// model CustomProjectPriority {
//   id         String            @id @default(cuid())
//   name       String
//   priorities ProjectPriority[]
//   projects   Project[]
// }

model Milestone {
  id          String   @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  description String
  // status      TaskStatus @default(PENDING) //progress, completed, or delayed.
  task        Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ENUMS
enum TaskAction {
  ADDED_TASKS
  UPDATED_TASKS
  DELETED_TASKS
  COMPLETED_TASKS
  UNCOMPLETED_TASKS
  ADDED_COMMENTS_TO_TASKS
  UPDATED_COMMENTS_TO_TASKS
  DELETED_COMMENTS_TO_TASKS
  TASKS_COLLABORATOR_ADDED
  TASKS_COLLABORATOR_DELETED
  ADDED_SUBTASKS
}

enum ProjectAction {
  ADDED_PROJECTS
  UPDATED_PROJECTS
  DELETED_PROJECTS
  COMPLETED_PROJECTS
  UNCOMPLETED_PROJECTS
  ADDED_COMMENTS_TO_PROJECTS
  UPDATED_COMMENTS_TO_PROJECTS
  DELETED_COMMENTS_TO_PROJECTS
  PROJECTS_COLLABORATOR_ADDED
  PROJECTS_COLLABORATOR_DELETED
}

enum ProjectRole {
  LEAD
  GUEST
  MEMBER
  ADMIN
}

// enum TaskPriority {
//   HIGH
//   MEDIUM
//   LOW
//   CRITICAL
//   URGENT
//   NORMAL
//   MINOR
// }

// // get task status function for each of the  status
// enum TaskStatus {
//   TO_DO
//   IN_PROGRESS
//   PENDING
//   COMPLETED
//   CANCELED
//   DEFERRED
//   ON_HOLD
//   IN_REVIEW
// }
// TODO: APPRAISAL, JOB, AWARDS, CONTRACT, EMPLOYEE DOCUMENT, COMPLAINT, TRAINING

model Employee {
  id            String    @id @default(cuid())
  fullName      String?
  displayName   String?
  email         String?
  birthDate     DateTime?
  gender        String?
  contactNumber String?
  address       Json?
  image         String?
  salary        Float?
  dateJoined    DateTime?
  leaveDate     DateTime?
  bloodGroup    String?
  ethnicRace    String?
  maritalStatus String?
  isActive      Boolean   @default(true)

  role EmployeeRole @default(MEMBER)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // spaces          Space[]
  subtasks       Subtask[]
  taskComments   TaskComment[]
  taskHistory    TaskHistory[]
  taskCreator    Task[]        @relation("TaskCreator")
  taskFiles      TaskFile[]
  projectCreator Project[]     @relation("ProjectCreator")

  employeeTeam EmployeeTeam[]
  invite       Invite[]

  taskCollaborator    TaskCollaborator[]
  projectCollaborator ProjectCollaborator[]
  subtaskCollaborator SubtaskCollaborator[]

  attendance   Attendance[]
  leave        Leave[]
  education    Education[]
  leaveComment LeaveComment[]
  leaveType    LeaveType[]
  job          Job[]
  timesheet    Timesheet[]
  payroll      Payroll[]

  messages               Message[]
  conversationsInitiated Conversation[]  @relation("EmployeeOne")
  conversationsReceived  Conversation[]  @relation("EmployeeTwo")
  directMessages         DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Group     Group[]

  @@index([userId])
  @@index([workspaceId])
  @@index([id])
  @@index([role])
}

model Team {
  id    String  @id @default(cuid())
  name  String  @unique
  alias String?

  role TeamRole @default(MEMBER)

  workspaceId  String
  workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  employeeTeam EmployeeTeam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

// Join table for many-to-many relation between Employee and Team
model EmployeeTeam {
  id         String   @id @default(cuid())
  employeeId String
  teamId     String
  role       TeamRole @default(MEMBER)

  teamCreator Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([teamId])
}

model Attendance {
  id           String           @id @default(cuid())
  clockIn      DateTime
  clockOut     DateTime?
  totalHour    Float?
  late         Float?
  earlyLeaving Float?
  overtime     Float?
  break        Float?
  state        AttendanceStatus

  employeeId String
  punchedBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

model Timesheet {
  id          String   @id @default(cuid())
  date        DateTime
  hoursWorked Float
  remark      String?
  overtime    Float

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

model Leave {
  id String @id @default(cuid())

  appliedDate DateTime @default(now())
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date
  duration    Int
  reason      String?

  //  leaveResponseFrom DateTime? // accept leave startDate
  // leaveResponseTo   DateTime? // accepted leave endDate 
  leaveResponseBy String? // the admin that responded to the leave
  leaveTypeId     String
  status          LeaveStatus @default(PENDING)

  leaveType LeaveType      @relation(fields: [leaveTypeId], references: [id])
  comments  LeaveComment[]

  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([employeeId])
  @@index([leaveTypeId])
  @@index([workspaceId])
}

model LeaveType {
  id   String @id @default(cuid())
  name String

  leaves Leave[]

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
  @@index([employeeId])
  @@index([workspaceId])
}

model LeaveComment {
  id String @id @default(cuid())

  comments String

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  leave   Leave  @relation(fields: [leaveId], references: [id])
  leaveId String

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())

  updatedAt DateTime @updatedAt

  @@index([leaveId])
  @@index([workspaceId])
  @@index([employeeId])
}

model LeaveHistory {
  id            String       @id @default(cuid())
  leaveId       String
  oldStatus     LeaveStatus
  updatedDate   DateTime?
  updatedStatus LeaveStatus?
  updatedBy     String?
}

model Education {
  id String @id @default(cuid())

  institution   String?
  courseOfStudy String?
  result        String?
  degree        String?
  startDate     DateTime?
  endDate       DateTime?
  status        Boolean   @default(true)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

model PerformanceAppraisal {
  id String @id @default(cuid())

  appraisalDate      DateTime
  rating             Float
  comments           String
  goals              String
  achievements       String
  managerComments    String
  appraisalQuestions Json
  appraisalResponse  AppraisalResponse[]
}

model AppraisalResponse {
  id String @id @default(cuid())

  appraisalId          String
  performanceAppraisal PerformanceAppraisal @relation(fields: [appraisalId], references: [id])

  question String
  response String

  // @@index([employeeId])
  @@index([appraisalId])
}

// PAYMENT

model Payroll {
  id          String       @id @default(cuid())
  employeeId  String
  salary      Float
  payPeriod   String
  paymentDate DateTime
  deductions  Deduction[]
  commissions Commission[]
  bonuses     Bonus[]

  creatorId String
  createdBy Employee  @relation(fields: [creatorId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payslip   Payslip[]
}

model Deduction {
  id          String   @id @default(cuid())
  payroll     Payroll  @relation(fields: [payrollId], references: [id])
  payrollId   String
  name        String
  amount      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Payslip     Payslip? @relation(fields: [payslipId], references: [id])
  payslipId   String?
}

model Commission {
  id          String   @id @default(cuid())
  payroll     Payroll  @relation(fields: [payrollId], references: [id])
  payrollId   String
  name        String
  amount      Float
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Payslip     Payslip? @relation(fields: [payslipId], references: [id])
  payslipId   String?
}

model Bonus {
  id          String @id @default(cuid())
  name        String
  amount      Float
  description String

  payrollId String
  payroll   Payroll  @relation(fields: [payrollId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Payslip   Payslip? @relation(fields: [payslipId], references: [id])
  payslipId String?
}

model Payslip {
  id            String       @id @default(cuid())
  payroll       Payroll      @relation(fields: [payrollId], references: [id])
  payrollId     String
  payPeriod     String
  paymentDate   DateTime
  employeeName  String
  employeeId    String
  grossEarnings Float
  netPay        Float
  taxes         Float
  deductions    Deduction[]
  commissions   Commission[]
  bonuses       Bonus[]
}

// Job Board 
model Job {
  id                   String                 @id @default(cuid())
  title                String
  category             String?
  requirement          String
  branch               String?
  email                String
  address              String
  salaryRange          Int
  noOfPositions        Int
  company              String
  types                String
  education            String
  industry             String
  experience           String
  employee             Employee?              @relation(fields: [employeeId], references: [id])
  employeeId           String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  JobApplicantResponse JobApplicantResponse[]
}

// TODO: Recieves external user applications
// TODO: When application is received send an email to the applicant
// TODO: When application is Rejected send a custom email 
// TODO: When application is accepted send a custom email 

model JobApplicantResponse {
  id String @id @default(cuid())

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  coverLetter String?
  resume      String

  other Json?

  status ApplicationStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PaymentStatus {
  UNPAID
  PAID
}

enum AttendanceStatus {
  PUNCHED_IN
  PUNCHED_OUT
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

enum EmployeeRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum TeamRole {
  LEAD
  MEMBER
  ADMIN
}

// Chat communication model 
model Group {
  id   String      @id @default(cuid())
  name String
  type MessageType @default(TEXT)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([workspaceId])
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text

  fileUrl String? @db.Text

  deleted Boolean @default(false)
  read    Boolean @default(false)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([groupId, employeeId])
}

model Conversation {
  id String @id @default(cuid())

  employeeOneId String
  employeeOne   Employee @relation("EmployeeOne", fields: [employeeOneId], references: [id], onDelete: Cascade)

  employeeTwoId String
  employeeTwo   Employee @relation("EmployeeTwo", fields: [employeeTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([employeeOneId, employeeTwoId])
  @@index([employeeTwoId, employeeOneId])
}

model DirectMessage {
  id      String  @id @default(cuid())
  content String  @db.Text
  fileUrl String? @db.Text

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, conversationId])
}

enum MessageType {
  TEXT
  AUDIO
  VIDEO
}

enum MessageStatus {
  READ
  DELIVERED
  SENT
}

// // File model
// model File {
//   fileId          Int      @id @default(autoincrement())
//   employeeId          Int
//   folderId        Int?
//   filename         String
//   filetype         String
//   size             Int
//   is_deleted       Boolean @default(false)
//   version_number   Int
//   file_content_type String
//   file_content     String
//   thumbnail_url    String
//   download_count   Int
//   tags             String[]
//   access_control_type String
//   created_at       DateTime @default(now())
//   updated_at       DateTime
//   metadata         Json
//   owner            Employee     @relation(fields: [employeeId], references: [employeeId])
//   folder           Folder?  @relation(fields: [folderId], references: [folderId])
//   permissions      Permission[]
// }

// // Folder model
// model Folder {
//   folderId        Int      @id @default(autoincrement())
//   employeeId          Int
//   parent_folderId Int?
//   folder_name      String
//   created_at       DateTime @default(now())
//   updated_at       DateTime
//   is_deleted       Boolean @default(false)
//   access_control_type String
//   metadata         Json
//   owner            Employee     @relation(fields: [employeeId], references: [employeeId])
//   parentFolder     Folder?  @relation("ParentFolder", fields: [parent_folderId], references: [folderId])
//   subFolders       Folder[] @relation("SubFolders")
//   files            File[]
//   permissions      Permission[]
// }

// // Permission model
// model Permission {
//   permissionId    Int      @id @default(autoincrement())
//   employeeId          Int
//   targetId        Int
//   target_type      String
//   role             String
//   employee             Employee     @relation(fields: [employeeId], references: [employeeId])
//   file             File?    @relation(fields: [targetId], references: [fileId], when: [{target_type: "file"}])
//   folder           Folder?  @relation(fields: [targetId], references: [folderId], when: [{target_type: "folder"}])
// }

// // Activity Log model
// model ActivityLog {
//   logId           Int      @id @default(autoincrement())
//   employeeId          Int
//   action_type      String
//   targetId        Int
//   target_type      String
//   timestamp        DateTime @default(now())
//   employee             Employee     @relation(fields: [employeeId], references: [employeeId])
//   file             File?    @relation(fields: [targetId], references: [fileId], when: [{target_type: "file"}])
//   folder           Folder?  @relation(fields: [targetId], references: [folderId], when: [{target_type: "folder"}])
// }

// // SharedLink model
// model SharedLink {
//   linkId          Int      @id @default(autoincrement())
//   employeeId          Int
//   targetId        Int
//   target_type      String
//   link_url         String
//   expiration_date  DateTime
//   password_protected Boolean
//   access_count     Int
//   employee             Employee     @relation(fields: [employeeId], references: [employeeId])
//   file             File?    @relation(fields: [targetId], references: [fileId], when: [{target_type: "file"}])
//   folder           Folder?  @relation(fields: [targetId], references: [folderId], when: [{target_type: "folder"}])
// }

// // Notification model
// model Notification {
//   notificationId  Int      @id @default(autoincrement())
//   employeeId          Int
//   senderId        Int
//   notification_type String
//   targetId        Int
//   target_type      String
//   is_read          Boolean
//   timestamp        DateTime @default(now())
//   employee             Employee     @relation(fields: [employeeId], references: [employeeId])
//   sender           Employee     @relation("Sender", fields: [senderId], references: [employeeId])
//   file             File?    @relation(fields: [targetId], references: [fileId], when: [{target_type: "file"}])
//   folder           Folder?  @relation(fields: [targetId], references: [folderId], when: [{target_type: "folder"}])
// }

// // Comment model
// model Comment {
//   commentId       Int      @id @default(autoincrement())
//   employeeId          Int
//   targetId        Int
//   target_type      String
//   comment_text     String
//   timestamp        DateTime @default(now())
//   employee             Employee     @relation(fields: [employeeId], references: [employeeId])
//   file             File?    @relation(fields: [targetId], references: [fileId], when: [{target_type: "file"}])
//   folder           Folder?  @relation(fields: [targetId], references: [folderId], when: [{target_type: "folder"}])
// }
