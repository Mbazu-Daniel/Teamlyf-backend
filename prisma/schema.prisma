// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Administration 

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  organizations Organization[]
  employees     Employee[]
  teams         Team[]
  invite        Invite[]
  createdBy     Task[]         @relation("CreatedBy")
  collaborators Task[]         @relation("Collaborators")

  taskComments TaskComment[]
  taskHistory  TaskHistory[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Organization {
  id         String  @id @default(cuid())
  name       String  @unique
  imageUrl   String?
  address    String?
  inviteCode String  @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  employees Employee[]
  teams     Team[]
  invite    Invite[]
  tasks     Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, name])
}

enum EmployeeRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

model Employee {
  id            String    @id @default(cuid())
  fullName      String?
  displayName   String?
  email         String?
  birthDate     DateTime?
  gender        String?
  contactNumber String?
  address       String?
  image         String?
  salary        Float?

  role   EmployeeRole @default(MEMBER)
  userId String
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, organizationId])
}

enum TeamType {
  TEXT
  AUDIO
  VIDEO
}

// Team or Department
model Team {
  id     String   @id @default(cuid())
  name   String   @unique
  alias  String?
  type   TeamType @default(TEXT)
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, organizationId])
}

model Invite {
  id             String       @id @default(uuid())
  token          String
  email          String
  role           EmployeeRole @default(MEMBER)
  expirationDate DateTime

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Invite")
}

// Project Management 
model TaskPriority {
  id        String   @id @default(cuid())
  name      String
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskStatus {
  id        String   @id @default(cuid())
  name      String
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id            String   @id @default(cuid())
  title         String
  description   String?
  labels        String[]
  isCompleted   Boolean  @default(false)
  notifications Boolean  @default(true)
  startDate     DateTime @default(now())
  endDate       DateTime
  reminderDate  DateTime

  taskComments TaskComment[]
  taskHistory  TaskHistory[]

  userId String
  user   User   @relation("CreatedBy", fields: [userId], references: [id])

  collaboratorsId String?
  collaborators   User?   @relation("Collaborators", fields: [collaboratorsId], references: [id])

  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])

  taskPriorityId String?
  TaskPriority   TaskPriority? @relation(fields: [taskPriorityId], references: [id])

  taskStatusId String?
  TaskStatus   TaskStatus? @relation(fields: [taskStatusId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskComment {
  id   String @id @default(cuid())
  text String

  userId String
  User   User   @relation(fields: [userId], references: [id])

  taskId String
  Task   Task   @relation(fields: [taskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskAction {
  ADDED_TASKS
  UPDATED_TASKS
  DELETED_TASKS
  COMPLETED_TASKS
  UNCOMPLETED_TASKS
  ADDED_COMMENTS
  UPDATED_COMMENTS
  DELETED_COMMENTS
  COLLABORATOR_ADDED
  COLLABORATOR_DELETED
}

model TaskHistory {
  id     String     @id @default(cuid())
  action TaskAction
  taskId String?
  Task   Task?      @relation(fields: [taskId], references: [id])

  userId String?
  User   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
