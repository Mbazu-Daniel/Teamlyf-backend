// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// TODO: change from user to a better name
// TODO: add permission level on the project side

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Administration 

model User {
  id                 String      @id @default(cuid())
  email              String      @unique
  password           String
  passwordResetToken String?
  passwordResetAt    DateTime?
  isAdmin Boolean @default(false)
  superAdmin Boolean @default(false)
  workspaces         Workspace[]
  employees          Employee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// workspace
model Workspace {
  id         String  @id @default(cuid())
  name       String  @unique
  logo       String?
  address    String?
  inviteCode String  @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  employees Employee[]
  teams     Team[]
  invite    Invite[]
  spaces    Space[]
  tasks     Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, name])
}

enum EmployeeRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

model Employee {
  id            String    @id @default(cuid())
  fullName      String?
  displayName   String?
  email         String?
  birthDate     DateTime?
  gender        String?
  contactNumber String?
  address       String?
  image         String?
  salary        Float?
  dateJoined    DateTime?

  role EmployeeRole @default(MEMBER)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  spaces       Space[]
  subtasks     SubTask[]
  taskComments TaskComment[]
  taskHistory  TaskHistory[]
  teamCreator  Team[]

  taskCreator       Task[] @relation("TaskCreator")

  projectCreator       Project[] @relation("ProjectCreator")
  assignedManager      Project[] @relation("AssignedManager")

  employeeTeam EmployeeTeam[]
  invite       Invite[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  TaskCollaborator    TaskCollaborator[]
  ProjectCollaborator ProjectCollaborator[]

  @@index([userId, workspaceId, fullName, email, gender])
}

enum TeamType {
  TEXT
  AUDIO
  VIDEO
}

// Team or Department
model Team {
  id    String   @id @default(cuid())
  name  String   @unique
  alias String?
  type  TeamType @default(TEXT)

  employeeId  String
  teamCreator Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  workspaceId  String
  workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  employeeTeam EmployeeTeam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, workspaceId, name])
}

model EmployeeTeam {
  id         String       @id @default(cuid())
  employeeId String
  teamId     String
  role       EmployeeRole @default(MEMBER)

  // Define the relationships with Employee and Team
  employee Employee @relation(fields: [employeeId], references: [id])
  team     Team     @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invite {
  id             String       @id @default(cuid())
  token          String
  email          String
  role           EmployeeRole @default(MEMBER)
  expirationDate DateTime

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  employeeId String
  invitedBy  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Invite")
}

// Project Management 

// subspace
model Space {
  id    String @id @default(cuid())
  title String

  tasks    Task[]
  projects Project[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  employeeId String
  createdBy  Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Todo: Add Employee to model 
// Todo: Add Team to this model ?
// Todo: isFavourite boolean, start and Due date, thumbnails, attachments, priority

// Todo: client representative, assign PM, assign members

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?
  thumbnail   String?

  isFavourite Boolean @default(false)

  status    TaskStatus   @default(TO_DO)
  priority  TaskPriority @default(NORMAL)
  startDate DateTime     @default(now())
  dueDate   DateTime?

  tasks Task[]

  spaceId String
  spaces  Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

   projectCollaborators ProjectCollaborator[]

  projectCreatorId String?
  projectCreator   Employee? @relation("ProjectCreator", fields: [projectCreatorId], references: [id], onDelete: Cascade)

  managerId       String?
  assignedManager Employee? @relation("AssignedManager", fields: [managerId], references: [id], onDelete: Cascade)

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
  CRITICAL
  URGENT
  NORMAL
  MINOR
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  PENDING
  COMPLETED
  CANCELED
  DEFERRED
  ON_HOLD
  IN_REVIEW
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String?
  labels        String[]
  notifications Boolean   @default(true)
  startDate     DateTime  @default(now())
  dueDate       DateTime?
  reminderDate  DateTime?

  subtasks     SubTask[]
  taskComments TaskComment[]
  taskHistory  TaskHistory[]

  employeeId String
  createdBy  Employee @relation("TaskCreator", fields: [employeeId], references: [id], onDelete: Cascade)


  taskCollaborators TaskCollaborator[]

  spaceId String?
  spaces  Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  status   TaskStatus   @default(TO_DO)
  priority TaskPriority @default(NORMAL)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model SubTask {
  id    String @id @default(cuid())
  title String

  startDate DateTime
  endDate   DateTime

  employeeId String?
  assignees  Employee? @relation(fields: [employeeId], references: [id])

  taskId String?
  tasks  Task?   @relation(fields: [taskId], references: [id])

  status   TaskStatus   @default(TO_DO)
  priority TaskPriority @default(NORMAL)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskComment {
  id   String @id @default(cuid())
  text String

  taskId String
  tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
}

enum TaskAction {
  ADDED_TASKS
  UPDATED_TASKS
  DELETED_TASKS
  COMPLETED_TASKS
  UNCOMPLETED_TASKS
  ADDED_COMMENTS
  UPDATED_COMMENTS
  DELETED_COMMENTS
  COLLABORATOR_ADDED
  COLLABORATOR_DELETED
}

model TaskHistory {
  id     String     @id @default(cuid())
  action TaskAction

  taskId String?
  tasks  Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  employeeId String?
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskCollaborator {
  id String @id @default(cuid())

  taskId String
  tasks  Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectCollaborator {
  id String @id @default(cuid())

  projectId String
  projects  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
